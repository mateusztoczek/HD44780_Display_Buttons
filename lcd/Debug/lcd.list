
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000426c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e4  080044e4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080044e4  080044e4  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044e4  080044e4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080044ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000026c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b3af  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001fc4  00000000  00000000  0002b49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b00  00000000  00000000  0002d468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000869  00000000  00000000  0002df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ffe4  00000000  00000000  0002e7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e173  00000000  00000000  0004e7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3cb8  00000000  00000000  0005c928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000031b4  00000000  00000000  001205e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00123794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043f4 	.word	0x080043f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080043f4 	.word	0x080043f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b4a      	ldr	r3, [pc, #296]	; (80003c0 <MX_GPIO_Init+0x140>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a49      	ldr	r2, [pc, #292]	; (80003c0 <MX_GPIO_Init+0x140>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b47      	ldr	r3, [pc, #284]	; (80003c0 <MX_GPIO_Init+0x140>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b44      	ldr	r3, [pc, #272]	; (80003c0 <MX_GPIO_Init+0x140>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a43      	ldr	r2, [pc, #268]	; (80003c0 <MX_GPIO_Init+0x140>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b41      	ldr	r3, [pc, #260]	; (80003c0 <MX_GPIO_Init+0x140>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c6:	4b3e      	ldr	r3, [pc, #248]	; (80003c0 <MX_GPIO_Init+0x140>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a3d      	ldr	r2, [pc, #244]	; (80003c0 <MX_GPIO_Init+0x140>)
 80002cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b3b      	ldr	r3, [pc, #236]	; (80003c0 <MX_GPIO_Init+0x140>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b38      	ldr	r3, [pc, #224]	; (80003c0 <MX_GPIO_Init+0x140>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a37      	ldr	r2, [pc, #220]	; (80003c0 <MX_GPIO_Init+0x140>)
 80002e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b35      	ldr	r3, [pc, #212]	; (80003c0 <MX_GPIO_Init+0x140>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS_Pin_Pin|RW_Pin_Pin|E_Pin_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	210e      	movs	r1, #14
 80002fa:	4832      	ldr	r0, [pc, #200]	; (80003c4 <MX_GPIO_Init+0x144>)
 80002fc:	f001 f9fc 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin_Pin|D1_Pin_Pin|D2_Pin_Pin|D4_Pin_Pin
 8000300:	2200      	movs	r2, #0
 8000302:	21f7      	movs	r1, #247	; 0xf7
 8000304:	4830      	ldr	r0, [pc, #192]	; (80003c8 <MX_GPIO_Init+0x148>)
 8000306:	f001 f9f7 	bl	80016f8 <HAL_GPIO_WritePin>
                          |D5_Pin_Pin|D6_Pin_Pin|D7_Pin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_Pin_GPIO_Port, D3_Pin_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000314:	f001 f9f0 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800031e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000324:	2301      	movs	r3, #1
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4619      	mov	r1, r3
 800032e:	4825      	ldr	r0, [pc, #148]	; (80003c4 <MX_GPIO_Init+0x144>)
 8000330:	f001 f840 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RS_Pin_Pin|RW_Pin_Pin|E_Pin_Pin;
 8000334:	230e      	movs	r3, #14
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000338:	2301      	movs	r3, #1
 800033a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000344:	f107 0314 	add.w	r3, r7, #20
 8000348:	4619      	mov	r1, r3
 800034a:	481e      	ldr	r0, [pc, #120]	; (80003c4 <MX_GPIO_Init+0x144>)
 800034c:	f001 f832 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D0_Pin_Pin|D1_Pin_Pin|D2_Pin_Pin|D4_Pin_Pin
 8000350:	23f7      	movs	r3, #247	; 0xf7
 8000352:	617b      	str	r3, [r7, #20]
                          |D5_Pin_Pin|D6_Pin_Pin|D7_Pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	2301      	movs	r3, #1
 8000356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035c:	2300      	movs	r3, #0
 800035e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	4619      	mov	r1, r3
 8000366:	4818      	ldr	r0, [pc, #96]	; (80003c8 <MX_GPIO_Init+0x148>)
 8000368:	f001 f824 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800036c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000372:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000378:	2301      	movs	r3, #1
 800037a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	4619      	mov	r1, r3
 8000382:	4811      	ldr	r0, [pc, #68]	; (80003c8 <MX_GPIO_Init+0x148>)
 8000384:	f001 f816 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_Pin_Pin;
 8000388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038e:	2301      	movs	r3, #1
 8000390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2300      	movs	r3, #0
 8000398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D3_Pin_GPIO_Port, &GPIO_InitStruct);
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4619      	mov	r1, r3
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a4:	f001 f806 	bl	80013b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	2028      	movs	r0, #40	; 0x28
 80003ae:	f000 ffca 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003b2:	2028      	movs	r0, #40	; 0x28
 80003b4:	f000 ffe3 	bl	800137e <HAL_NVIC_EnableIRQ>

}
 80003b8:	bf00      	nop
 80003ba:	3728      	adds	r7, #40	; 0x28
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40021000 	.word	0x40021000
 80003c4:	48000800 	.word	0x48000800
 80003c8:	48000400 	.word	0x48000400

080003cc <LCD_WritePins>:
// timer used to create delay
TIM_HandleTypeDef *timer = &htim3;


// Configure data pins based on the provided data byte
static inline void LCD_WritePins(uint8_t data) {
 80003cc:	b5b0      	push	{r4, r5, r7, lr}
 80003ce:	b090      	sub	sp, #64	; 0x40
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
	LCD_E_SET;
 80003d6:	2201      	movs	r2, #1
 80003d8:	2108      	movs	r1, #8
 80003da:	4827      	ldr	r0, [pc, #156]	; (8000478 <LCD_WritePins+0xac>)
 80003dc:	f001 f98c 	bl	80016f8 <HAL_GPIO_WritePin>

    #ifdef LCD_8BIT_MODE
		GPIO_TypeDef* ports[] = {D0_GPIO_Port,D1_GPIO_Port,D2_GPIO_Port,D3_GPIO_Port,D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
 80003e0:	4b26      	ldr	r3, [pc, #152]	; (800047c <LCD_WritePins+0xb0>)
 80003e2:	f107 041c 	add.w	r4, r7, #28
 80003e6:	461d      	mov	r5, r3
 80003e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    	uint16_t pins[] = {D0_Pin,D1_Pin,D2_Pin,D3_Pin,D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 80003f4:	4b22      	ldr	r3, [pc, #136]	; (8000480 <LCD_WritePins+0xb4>)
 80003f6:	f107 040c 	add.w	r4, r7, #12
 80003fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#else
		GPIO_TypeDef* ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
    	uint16_t pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	#endif

    for (int i = 0; i < sizeof(ports) / sizeof(ports[0]); i++) {
 8000400:	2300      	movs	r3, #0
 8000402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000404:	e02b      	b.n	800045e <LCD_WritePins+0x92>
        if (data & (1 << i)) {
 8000406:	79fa      	ldrb	r2, [r7, #7]
 8000408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800040a:	fa42 f303 	asr.w	r3, r2, r3
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	2b00      	cmp	r3, #0
 8000414:	d010      	beq.n	8000438 <LCD_WritePins+0x6c>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 8000416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	3340      	adds	r3, #64	; 0x40
 800041c:	443b      	add	r3, r7
 800041e:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8000422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	3340      	adds	r3, #64	; 0x40
 8000428:	443b      	add	r3, r7
 800042a:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 800042e:	2201      	movs	r2, #1
 8000430:	4619      	mov	r1, r3
 8000432:	f001 f961 	bl	80016f8 <HAL_GPIO_WritePin>
 8000436:	e00f      	b.n	8000458 <LCD_WritePins+0x8c>
        } else {
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	3340      	adds	r3, #64	; 0x40
 800043e:	443b      	add	r3, r7
 8000440:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8000444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	3340      	adds	r3, #64	; 0x40
 800044a:	443b      	add	r3, r7
 800044c:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000450:	2200      	movs	r2, #0
 8000452:	4619      	mov	r1, r3
 8000454:	f001 f950 	bl	80016f8 <HAL_GPIO_WritePin>
    for (int i = 0; i < sizeof(ports) / sizeof(ports[0]); i++) {
 8000458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800045a:	3301      	adds	r3, #1
 800045c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800045e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000460:	2b07      	cmp	r3, #7
 8000462:	d9d0      	bls.n	8000406 <LCD_WritePins+0x3a>
        }
    }

    LCD_E_RESET;
 8000464:	2200      	movs	r2, #0
 8000466:	2108      	movs	r1, #8
 8000468:	4803      	ldr	r0, [pc, #12]	; (8000478 <LCD_WritePins+0xac>)
 800046a:	f001 f945 	bl	80016f8 <HAL_GPIO_WritePin>
}
 800046e:	bf00      	nop
 8000470:	3740      	adds	r7, #64	; 0x40
 8000472:	46bd      	mov	sp, r7
 8000474:	bdb0      	pop	{r4, r5, r7, pc}
 8000476:	bf00      	nop
 8000478:	48000800 	.word	0x48000800
 800047c:	0800440c 	.word	0x0800440c
 8000480:	0800442c 	.word	0x0800442c

08000484 <LCD_ReadPins>:


// Read the status of data pins and return the resulting byte
static inline uint8_t LCD_ReadPins(void) {
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b08e      	sub	sp, #56	; 0x38
 8000488:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    LCD_E_SET;
 8000490:	2201      	movs	r2, #1
 8000492:	2108      	movs	r1, #8
 8000494:	4821      	ldr	r0, [pc, #132]	; (800051c <LCD_ReadPins+0x98>)
 8000496:	f001 f92f 	bl	80016f8 <HAL_GPIO_WritePin>

	#ifdef LCD_8BIT_MODE
		GPIO_TypeDef* ports[] = {D0_GPIO_Port,D1_GPIO_Port,D2_GPIO_Port,D3_GPIO_Port,D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <LCD_ReadPins+0x9c>)
 800049c:	f107 0410 	add.w	r4, r7, #16
 80004a0:	461d      	mov	r5, r3
 80004a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    	uint16_t pins[] = {D0_Pin,D1_Pin,D2_Pin,D3_Pin,D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <LCD_ReadPins+0xa0>)
 80004b0:	463c      	mov	r4, r7
 80004b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		GPIO_TypeDef* ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
    	uint16_t pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	#endif


    for (int i = 0; i < sizeof(ports) / sizeof(ports[0]); i++) {
 80004b8:	2300      	movs	r3, #0
 80004ba:	633b      	str	r3, [r7, #48]	; 0x30
 80004bc:	e020      	b.n	8000500 <LCD_ReadPins+0x7c>
        if (HAL_GPIO_ReadPin(ports[i], pins[i]) == GPIO_PIN_SET) {
 80004be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	3338      	adds	r3, #56	; 0x38
 80004c4:	443b      	add	r3, r7
 80004c6:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80004ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	3338      	adds	r3, #56	; 0x38
 80004d0:	443b      	add	r3, r7
 80004d2:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80004d6:	4619      	mov	r1, r3
 80004d8:	4610      	mov	r0, r2
 80004da:	f001 f8f5 	bl	80016c8 <HAL_GPIO_ReadPin>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10a      	bne.n	80004fa <LCD_ReadPins+0x76>
            result |= (1 << i);
 80004e4:	2201      	movs	r2, #1
 80004e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	b25a      	sxtb	r2, r3
 80004ee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80004f2:	4313      	orrs	r3, r2
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    for (int i = 0; i < sizeof(ports) / sizeof(ports[0]); i++) {
 80004fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fc:	3301      	adds	r3, #1
 80004fe:	633b      	str	r3, [r7, #48]	; 0x30
 8000500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000502:	2b07      	cmp	r3, #7
 8000504:	d9db      	bls.n	80004be <LCD_ReadPins+0x3a>
        }
    }

    LCD_E_RESET;
 8000506:	2200      	movs	r2, #0
 8000508:	2108      	movs	r1, #8
 800050a:	4804      	ldr	r0, [pc, #16]	; (800051c <LCD_ReadPins+0x98>)
 800050c:	f001 f8f4 	bl	80016f8 <HAL_GPIO_WritePin>
    return result;
 8000510:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000514:	4618      	mov	r0, r3
 8000516:	3738      	adds	r7, #56	; 0x38
 8000518:	46bd      	mov	sp, r7
 800051a:	bdb0      	pop	{r4, r5, r7, pc}
 800051c:	48000800 	.word	0x48000800
 8000520:	0800440c 	.word	0x0800440c
 8000524:	0800442c 	.word	0x0800442c

08000528 <LCD_SetDataInputMode>:


// Set display in input mode
static void LCD_SetDataInputMode(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = D4_Pin;
 800052e:	2310      	movs	r3, #16
 8000530:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4619      	mov	r1, r3
 800053e:	481d      	ldr	r0, [pc, #116]	; (80005b4 <LCD_SetDataInputMode+0x8c>)
 8000540:	f000 ff38 	bl	80013b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = D5_Pin;
 8000544:	2320      	movs	r3, #32
 8000546:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	4619      	mov	r1, r3
 800054c:	4819      	ldr	r0, [pc, #100]	; (80005b4 <LCD_SetDataInputMode+0x8c>)
 800054e:	f000 ff31 	bl	80013b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = D6_Pin;
 8000552:	2340      	movs	r3, #64	; 0x40
 8000554:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4619      	mov	r1, r3
 800055a:	4816      	ldr	r0, [pc, #88]	; (80005b4 <LCD_SetDataInputMode+0x8c>)
 800055c:	f000 ff2a 	bl	80013b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = D7_Pin;
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	4619      	mov	r1, r3
 8000568:	4812      	ldr	r0, [pc, #72]	; (80005b4 <LCD_SetDataInputMode+0x8c>)
 800056a:	f000 ff23 	bl	80013b4 <HAL_GPIO_Init>

	#ifdef LCD_8BIT_MODE
	 	GPIO_InitStruct.Pin = D0_Pin;
 800056e:	2301      	movs	r3, #1
 8000570:	607b      	str	r3, [r7, #4]
	 	HAL_GPIO_Init(D0_GPIO_Port, &GPIO_InitStruct);
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	4619      	mov	r1, r3
 8000576:	480f      	ldr	r0, [pc, #60]	; (80005b4 <LCD_SetDataInputMode+0x8c>)
 8000578:	f000 ff1c 	bl	80013b4 <HAL_GPIO_Init>

	 	GPIO_InitStruct.Pin = D1_Pin;
 800057c:	2302      	movs	r3, #2
 800057e:	607b      	str	r3, [r7, #4]
	 	HAL_GPIO_Init(D1_GPIO_Port, &GPIO_InitStruct);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4619      	mov	r1, r3
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <LCD_SetDataInputMode+0x8c>)
 8000586:	f000 ff15 	bl	80013b4 <HAL_GPIO_Init>

	 	GPIO_InitStruct.Pin = D2_Pin;
 800058a:	2304      	movs	r3, #4
 800058c:	607b      	str	r3, [r7, #4]
	 	HAL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4619      	mov	r1, r3
 8000592:	4808      	ldr	r0, [pc, #32]	; (80005b4 <LCD_SetDataInputMode+0x8c>)
 8000594:	f000 ff0e 	bl	80013b4 <HAL_GPIO_Init>

	 	GPIO_InitStruct.Pin = D3_Pin;
 8000598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059c:	607b      	str	r3, [r7, #4]
	 	HAL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 ff05 	bl	80013b4 <HAL_GPIO_Init>
	#endif

}
 80005aa:	bf00      	nop
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	48000400 	.word	0x48000400

080005b8 <LCD_SetDataOutputMode>:


// Set display in output mode
static void LCD_SetDataOutputMode(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = D4_Pin;
 80005be:	2310      	movs	r3, #16
 80005c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4619      	mov	r1, r3
 80005d2:	481d      	ldr	r0, [pc, #116]	; (8000648 <LCD_SetDataOutputMode+0x90>)
 80005d4:	f000 feee 	bl	80013b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = D5_Pin;
 80005d8:	2320      	movs	r3, #32
 80005da:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4619      	mov	r1, r3
 80005e0:	4819      	ldr	r0, [pc, #100]	; (8000648 <LCD_SetDataOutputMode+0x90>)
 80005e2:	f000 fee7 	bl	80013b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = D6_Pin;
 80005e6:	2340      	movs	r3, #64	; 0x40
 80005e8:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4619      	mov	r1, r3
 80005ee:	4816      	ldr	r0, [pc, #88]	; (8000648 <LCD_SetDataOutputMode+0x90>)
 80005f0:	f000 fee0 	bl	80013b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = D7_Pin;
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4812      	ldr	r0, [pc, #72]	; (8000648 <LCD_SetDataOutputMode+0x90>)
 80005fe:	f000 fed9 	bl	80013b4 <HAL_GPIO_Init>

	#ifdef LCD_8BIT_MODE
	 	GPIO_InitStruct.Pin = D0_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
	 	HAL_GPIO_Init(D0_GPIO_Port, &GPIO_InitStruct);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	480f      	ldr	r0, [pc, #60]	; (8000648 <LCD_SetDataOutputMode+0x90>)
 800060c:	f000 fed2 	bl	80013b4 <HAL_GPIO_Init>

	 	GPIO_InitStruct.Pin = D1_Pin;
 8000610:	2302      	movs	r3, #2
 8000612:	607b      	str	r3, [r7, #4]
	 	HAL_GPIO_Init(D1_GPIO_Port, &GPIO_InitStruct);
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <LCD_SetDataOutputMode+0x90>)
 800061a:	f000 fecb 	bl	80013b4 <HAL_GPIO_Init>

	 	GPIO_InitStruct.Pin = D2_Pin;
 800061e:	2304      	movs	r3, #4
 8000620:	607b      	str	r3, [r7, #4]
	 	HAL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4619      	mov	r1, r3
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <LCD_SetDataOutputMode+0x90>)
 8000628:	f000 fec4 	bl	80013b4 <HAL_GPIO_Init>

	 	GPIO_InitStruct.Pin = D3_Pin;
 800062c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000630:	607b      	str	r3, [r7, #4]
	 	HAL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f000 febb 	bl	80013b4 <HAL_GPIO_Init>
	#endif
}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	48000400 	.word	0x48000400

0800064c <LCD_Read>:


// Read first 4 bites from LCD, then another 4 bites
uint8_t LCD_Read(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	71fb      	strb	r3, [r7, #7]
	LCD_SetDataInputMode();
 8000656:	f7ff ff67 	bl	8000528 <LCD_SetDataInputMode>

	LCD_RW_SET;
 800065a:	2201      	movs	r2, #1
 800065c:	2104      	movs	r1, #4
 800065e:	4806      	ldr	r0, [pc, #24]	; (8000678 <LCD_Read+0x2c>)
 8000660:	f001 f84a 	bl	80016f8 <HAL_GPIO_WritePin>
	#ifndef LCD_8BIT_MODE
		result = (LCD_ReadPins() << 4);
		result |= LCD_ReadPins();
	#else
		result = LCD_ReadPins();
 8000664:	f7ff ff0e 	bl	8000484 <LCD_ReadPins>
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]
	#endif

	return result;
 800066c:	79fb      	ldrb	r3, [r7, #7]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	48000800 	.word	0x48000800

0800067c <LCD_Write>:


// Write first 4 bites to LCD, then another 4 bites, wait until display is ready
void LCD_Write(uint8_t data, uint8_t is_command) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	460a      	mov	r2, r1
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	4613      	mov	r3, r2
 800068a:	71bb      	strb	r3, [r7, #6]
    if (is_command) {
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d005      	beq.n	800069e <LCD_Write+0x22>
    	LCD_RS_RESET;
 8000692:	2200      	movs	r2, #0
 8000694:	2102      	movs	r1, #2
 8000696:	4810      	ldr	r0, [pc, #64]	; (80006d8 <LCD_Write+0x5c>)
 8000698:	f001 f82e 	bl	80016f8 <HAL_GPIO_WritePin>
 800069c:	e004      	b.n	80006a8 <LCD_Write+0x2c>
    } else {
    	LCD_RS_SET;
 800069e:	2201      	movs	r2, #1
 80006a0:	2102      	movs	r1, #2
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <LCD_Write+0x5c>)
 80006a4:	f001 f828 	bl	80016f8 <HAL_GPIO_WritePin>
    }

	LCD_RW_RESET;
 80006a8:	2200      	movs	r2, #0
 80006aa:	2104      	movs	r1, #4
 80006ac:	480a      	ldr	r0, [pc, #40]	; (80006d8 <LCD_Write+0x5c>)
 80006ae:	f001 f823 	bl	80016f8 <HAL_GPIO_WritePin>
	LCD_SetDataOutputMode();
 80006b2:	f7ff ff81 	bl	80005b8 <LCD_SetDataOutputMode>

	#ifndef LCD_8BIT_MODE
		LCD_WritePins(data >> 4);
	#endif
	LCD_WritePins(data);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fe87 	bl	80003cc <LCD_WritePins>

	while((LCD_CheckBusyFlag() & (1<<7)));
 80006be:	bf00      	nop
 80006c0:	f000 f83c 	bl	800073c <LCD_CheckBusyFlag>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	dbf9      	blt.n	80006c0 <LCD_Write+0x44>
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	48000800 	.word	0x48000800

080006dc <LCD_Char>:



//	Print character on display
void LCD_Char(char c) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	// If the character is in the range of special characters (0x80 - 0x87),
	// keep only the last 3 bits; otherwise, keep the character unchanged
	LCD_Write((((c >= 0x80) && (c <= 0x87)) ? (c & 0x07) : c), 0);
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	da07      	bge.n	80006fe <LCD_Char+0x22>
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b87      	cmp	r3, #135	; 0x87
 80006f2:	d804      	bhi.n	80006fe <LCD_Char+0x22>
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	e000      	b.n	8000700 <LCD_Char+0x24>
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ffba 	bl	800067c <LCD_Write>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LCD_String>:


//	Print string on display
void LCD_String(char* str) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	char c;
	while((c = *(str++)))
 8000718:	e003      	b.n	8000722 <LCD_String+0x12>
		LCD_Char(c);
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ffdd 	bl	80006dc <LCD_Char>
	while((c = *(str++)))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f3      	bne.n	800071a <LCD_String+0xa>
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <LCD_CheckBusyFlag>:
	LCD_Write(LCD_CLR|LCD_HOME,1);
}


// Read BF value
uint8_t LCD_CheckBusyFlag(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	LCD_RS_RESET;
 8000740:	2200      	movs	r2, #0
 8000742:	2102      	movs	r1, #2
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <LCD_CheckBusyFlag+0x18>)
 8000746:	f000 ffd7 	bl	80016f8 <HAL_GPIO_WritePin>
	return LCD_Read();
 800074a:	f7ff ff7f 	bl	800064c <LCD_Read>
 800074e:	4603      	mov	r3, r0
}
 8000750:	4618      	mov	r0, r3
 8000752:	bd80      	pop	{r7, pc}
 8000754:	48000800 	.word	0x48000800

08000758 <LCD_Cursor>:


// Control cursor visibility
void LCD_Cursor(uint8_t on_off) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	if(on_off == 0)
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d104      	bne.n	8000772 <LCD_Cursor+0x1a>
		LCD_Write(LCD_ONOFF|LCD_DISPLAYON,1);
 8000768:	2101      	movs	r1, #1
 800076a:	200c      	movs	r0, #12
 800076c:	f7ff ff86 	bl	800067c <LCD_Write>
	else
		LCD_Write(LCD_ONOFF|LCD_DISPLAYON|LCD_CURSORON,1);
}
 8000770:	e003      	b.n	800077a <LCD_Cursor+0x22>
		LCD_Write(LCD_ONOFF|LCD_DISPLAYON|LCD_CURSORON,1);
 8000772:	2101      	movs	r1, #1
 8000774:	200e      	movs	r0, #14
 8000776:	f7ff ff81 	bl	800067c <LCD_Write>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <LCD_Blink>:


// Control cursor blinking
void LCD_Blink(uint8_t on_off) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	71fb      	strb	r3, [r7, #7]
	if(on_off == 0)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d104      	bne.n	800079c <LCD_Blink+0x1a>
		LCD_Write(LCD_ONOFF|LCD_DISPLAYON,1);
 8000792:	2101      	movs	r1, #1
 8000794:	200c      	movs	r0, #12
 8000796:	f7ff ff71 	bl	800067c <LCD_Write>
	else
		LCD_Write(LCD_ONOFF|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKON,1);
}
 800079a:	e003      	b.n	80007a4 <LCD_Blink+0x22>
		LCD_Write(LCD_ONOFF|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKON,1);
 800079c:	2101      	movs	r1, #1
 800079e:	200d      	movs	r0, #13
 80007a0:	f7ff ff6c 	bl	800067c <LCD_Write>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <LCD_SetLocation>:


// Set cursor on display: x-row, y-column
void LCD_SetLocation(uint8_t x, uint8_t y) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	71fb      	strb	r3, [r7, #7]
 80007b8:	4613      	mov	r3, r2
 80007ba:	71bb      	strb	r3, [r7, #6]
    uint8_t line_offset[] = {LCD_LINE1, LCD_LINE2};
 80007bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c0:	81bb      	strh	r3, [r7, #12]

    if (y < sizeof(line_offset) / sizeof(line_offset[0])) {
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d80f      	bhi.n	80007e8 <LCD_SetLocation+0x3c>
        uint8_t target_line = line_offset[y];
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	3310      	adds	r3, #16
 80007cc:	443b      	add	r3, r7
 80007ce:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80007d2:	73fb      	strb	r3, [r7, #15]
        LCD_Write((0x80 + target_line + x),1);
 80007d4:	7bfa      	ldrb	r2, [r7, #15]
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4413      	add	r3, r2
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	3b80      	subs	r3, #128	; 0x80
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2101      	movs	r1, #1
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff4a 	bl	800067c <LCD_Write>
    }
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <LCD_InitBuffer>:


// Set buffer
void LCD_InitBuffer(void) {
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
    for (int line = 0; line < LCD_Y; line++) {
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	e013      	b.n	8000824 <LCD_InitBuffer+0x34>
        for (int position = 0; position < LCD_X; position++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	e00a      	b.n	8000818 <LCD_InitBuffer+0x28>
            lcdBuffer[line][position] = ' ';
 8000802:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <LCD_InitBuffer+0x48>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	441a      	add	r2, r3
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	2220      	movs	r2, #32
 8000810:	701a      	strb	r2, [r3, #0]
        for (int position = 0; position < LCD_X; position++) {
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2b0f      	cmp	r3, #15
 800081c:	ddf1      	ble.n	8000802 <LCD_InitBuffer+0x12>
    for (int line = 0; line < LCD_Y; line++) {
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3301      	adds	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b01      	cmp	r3, #1
 8000828:	dde8      	ble.n	80007fc <LCD_InitBuffer+0xc>
        }
    }
}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	20000098 	.word	0x20000098

0800083c <LCD_UpdateBuffer>:
    printf("koniec buffora\n");
}


// Update text inside buffer
void LCD_UpdateBuffer(uint8_t line, uint8_t position, char* str) {
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	603a      	str	r2, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	460b      	mov	r3, r1
 800084a:	71bb      	strb	r3, [r7, #6]
    uint8_t i = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	73fb      	strb	r3, [r7, #15]
    while (str[i] != '\0' && (position + i) < LCD_X) {
 8000850:	e010      	b.n	8000874 <LCD_UpdateBuffer+0x38>
        lcdBuffer[line][position + i] = str[i];
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	683a      	ldr	r2, [r7, #0]
 8000856:	18d1      	adds	r1, r2, r3
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	79b8      	ldrb	r0, [r7, #6]
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	4403      	add	r3, r0
 8000860:	7808      	ldrb	r0, [r1, #0]
 8000862:	490d      	ldr	r1, [pc, #52]	; (8000898 <LCD_UpdateBuffer+0x5c>)
 8000864:	0112      	lsls	r2, r2, #4
 8000866:	440a      	add	r2, r1
 8000868:	4413      	add	r3, r2
 800086a:	4602      	mov	r2, r0
 800086c:	701a      	strb	r2, [r3, #0]
        i++;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	3301      	adds	r3, #1
 8000872:	73fb      	strb	r3, [r7, #15]
    while (str[i] != '\0' && (position + i) < LCD_X) {
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d004      	beq.n	800088a <LCD_UpdateBuffer+0x4e>
 8000880:	79ba      	ldrb	r2, [r7, #6]
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	4413      	add	r3, r2
 8000886:	2b0f      	cmp	r3, #15
 8000888:	dde3      	ble.n	8000852 <LCD_UpdateBuffer+0x16>
    }
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000098 	.word	0x20000098

0800089c <LCD_FlushBuffer>:

// Send bufffer to LCD
void LCD_FlushBuffer(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
    for (uint8_t line = 0; line < LCD_Y; line++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	e01b      	b.n	80008e0 <LCD_FlushBuffer+0x44>
        for (uint8_t position = 0; position < LCD_X; position++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	71bb      	strb	r3, [r7, #6]
 80008ac:	e012      	b.n	80008d4 <LCD_FlushBuffer+0x38>
            LCD_SetLocation(position, line);
 80008ae:	79fa      	ldrb	r2, [r7, #7]
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff79 	bl	80007ac <LCD_SetLocation>
            LCD_Char(lcdBuffer[line][position]);
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	490c      	ldr	r1, [pc, #48]	; (80008f0 <LCD_FlushBuffer+0x54>)
 80008c0:	0112      	lsls	r2, r2, #4
 80008c2:	440a      	add	r2, r1
 80008c4:	4413      	add	r3, r2
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff07 	bl	80006dc <LCD_Char>
        for (uint8_t position = 0; position < LCD_X; position++) {
 80008ce:	79bb      	ldrb	r3, [r7, #6]
 80008d0:	3301      	adds	r3, #1
 80008d2:	71bb      	strb	r3, [r7, #6]
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d9e9      	bls.n	80008ae <LCD_FlushBuffer+0x12>
    for (uint8_t line = 0; line < LCD_Y; line++) {
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	3301      	adds	r3, #1
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d9e0      	bls.n	80008a8 <LCD_FlushBuffer+0xc>
        }
    }
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000098 	.word	0x20000098

080008f4 <LCD_Clear>:


// Clear LCD display
void LCD_Clear(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	LCD_Write(LCD_CLR,1);
 80008f8:	2101      	movs	r1, #1
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff febe 	bl	800067c <LCD_Write>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <LCD_Add>:
	LCD_String(str);
}


//	Print without cleaning the display
void LCD_Add(char* str, uint8_t line) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
	LCD_SetLocation(0,line);
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	4619      	mov	r1, r3
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff ff49 	bl	80007ac <LCD_SetLocation>
	LCD_UpdateBuffer(line, 0, str);
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff8b 	bl	800083c <LCD_UpdateBuffer>
	LCD_String(str);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fef2 	bl	8000710 <LCD_String>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <LCD_Delay_us>:


// Delay in us
void LCD_Delay_us(TIM_HandleTypeDef *htim, uint16_t us) {
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	807b      	strh	r3, [r7, #2]
    htim->Instance->CNT = 0;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	; 0x24
    while (htim->Instance->CNT <= us);
 8000948:	bf00      	nop
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000950:	887b      	ldrh	r3, [r7, #2]
 8000952:	429a      	cmp	r2, r3
 8000954:	d9f9      	bls.n	800094a <LCD_Delay_us+0x16>
}
 8000956:	bf00      	nop
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LCD_Init>:
    }
}


//	Initialize display
void LCD_Init(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

	// reset data pins
	LCD_RS_RESET;
 8000968:	2200      	movs	r2, #0
 800096a:	2102      	movs	r1, #2
 800096c:	4820      	ldr	r0, [pc, #128]	; (80009f0 <LCD_Init+0x8c>)
 800096e:	f000 fec3 	bl	80016f8 <HAL_GPIO_WritePin>
	LCD_E_RESET;
 8000972:	2200      	movs	r2, #0
 8000974:	2108      	movs	r1, #8
 8000976:	481e      	ldr	r0, [pc, #120]	; (80009f0 <LCD_Init+0x8c>)
 8000978:	f000 febe 	bl	80016f8 <HAL_GPIO_WritePin>
	LCD_RW_RESET;
 800097c:	2200      	movs	r2, #0
 800097e:	2104      	movs	r1, #4
 8000980:	481b      	ldr	r0, [pc, #108]	; (80009f0 <LCD_Init+0x8c>)
 8000982:	f000 feb9 	bl	80016f8 <HAL_GPIO_WritePin>

	//set display into output mode and wait
	LCD_SetDataOutputMode();
 8000986:	f7ff fe17 	bl	80005b8 <LCD_SetDataOutputMode>
	HAL_Delay(15);
 800098a:	200f      	movs	r0, #15
 800098c:	f000 fbdc 	bl	8001148 <HAL_Delay>

	// send initialization data
	LCD_WritePins(0x03);
 8000990:	2003      	movs	r0, #3
 8000992:	f7ff fd1b 	bl	80003cc <LCD_WritePins>
	LCD_Delay_us(timer, 4100);
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <LCD_Init+0x90>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f241 0104 	movw	r1, #4100	; 0x1004
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ffc8 	bl	8000934 <LCD_Delay_us>

	LCD_WritePins(0x03);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f7ff fd11 	bl	80003cc <LCD_WritePins>
	LCD_Delay_us(timer, 100);
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <LCD_Init+0x90>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2164      	movs	r1, #100	; 0x64
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ffbf 	bl	8000934 <LCD_Delay_us>

	// set transfer mode
	#ifdef LCD_8BIT_MODE
		LCD_WritePins(0x03);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f7ff fd08 	bl	80003cc <LCD_WritePins>
		LCD_Delay_us(timer, 100);
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <LCD_Init+0x90>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2164      	movs	r1, #100	; 0x64
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffb6 	bl	8000934 <LCD_Delay_us>
		LCD_Write(LCD_FUNC|LCD_FUNC8BIT|LCD_FUNC2LINE|LCD_FUNC5x7,1);
 80009c8:	2101      	movs	r1, #1
 80009ca:	2038      	movs	r0, #56	; 0x38
 80009cc:	f7ff fe56 	bl	800067c <LCD_Write>
		LCD_WritePins(0x02);
		LCD_Delay_us(timer, 100);
		LCD_Write(LCD_FUNC|LCD_FUNC4BIT|LCD_FUNC2LINE|LCD_FUNC5x7,1);
	#endif

	LCD_Write(LCD_ONOFF|LCD_CURSOROFF,1);
 80009d0:	2101      	movs	r1, #1
 80009d2:	2008      	movs	r0, #8
 80009d4:	f7ff fe52 	bl	800067c <LCD_Write>
	LCD_Write(LCD_ONOFF|LCD_DISPLAYON,1);
 80009d8:	2101      	movs	r1, #1
 80009da:	200c      	movs	r0, #12
 80009dc:	f7ff fe4e 	bl	800067c <LCD_Write>
	LCD_Write(LCD_ENTRY|LCD_ENTRYRIGHT,1);
 80009e0:	2101      	movs	r1, #1
 80009e2:	2006      	movs	r0, #6
 80009e4:	f7ff fe4a 	bl	800067c <LCD_Write>

	// Clear display
	LCD_Clear();
 80009e8:	f7ff ff84 	bl	80008f4 <LCD_Clear>
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	48000800 	.word	0x48000800
 80009f4:	20000000 	.word	0x20000000

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	lock = 0;
 80009fe:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <main+0xd0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	printed = 1;
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <main+0xd4>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
	cursor_position=0;
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <main+0xd8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
	state=true;
 8000a10:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <main+0xdc>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
	char formattedText[20];

	InitDisplayField(displayField);
 8000a16:	4830      	ldr	r0, [pc, #192]	; (8000ad8 <main+0xe0>)
 8000a18:	f000 f8c9 	bl	8000bae <InitDisplayField>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1c:	f000 fb2e 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a20:	f000 f864 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a24:	f7ff fc2c 	bl	8000280 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a28:	f000 fa78 	bl	8000f1c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000a2c:	f000 fa28 	bl	8000e80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000a30:	482a      	ldr	r0, [pc, #168]	; (8000adc <main+0xe4>)
 8000a32:	f002 fb41 	bl	80030b8 <HAL_TIM_Base_Start>

  HAL_Delay(50);
 8000a36:	2032      	movs	r0, #50	; 0x32
 8000a38:	f000 fb86 	bl	8001148 <HAL_Delay>
  LCD_Init();
 8000a3c:	f7ff ff92 	bl	8000964 <LCD_Init>
  HAL_Delay(20);
 8000a40:	2014      	movs	r0, #20
 8000a42:	f000 fb81 	bl	8001148 <HAL_Delay>
  LCD_InitBuffer();
 8000a46:	f7ff fed3 	bl	80007f0 <LCD_InitBuffer>

  LCD_Add("Insert word:",0);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4824      	ldr	r0, [pc, #144]	; (8000ae0 <main+0xe8>)
 8000a4e:	f7ff ff59 	bl	8000904 <LCD_Add>
  LCD_SetLocation(0,0);
 8000a52:	2100      	movs	r1, #0
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff fea9 	bl	80007ac <LCD_SetLocation>
  LCD_Cursor(0);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff fe7c 	bl	8000758 <LCD_Cursor>
  LCD_Blink(1);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff fe8e 	bl	8000782 <LCD_Blink>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (lock == 1) {
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <main+0xd0>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d122      	bne.n	8000ab6 <main+0xbe>
		  if (!printed) {
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <main+0xd4>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d11a      	bne.n	8000ab0 <main+0xb8>
			  char val = alphabet[displayField[cursor_position]];
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <main+0xd8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <main+0xe0>)
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <main+0xec>)
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	75fb      	strb	r3, [r7, #23]
			  sprintf(formattedText, "%c", val);
 8000a8a:	7dfa      	ldrb	r2, [r7, #23]
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4916      	ldr	r1, [pc, #88]	; (8000ae8 <main+0xf0>)
 8000a90:	4618      	mov	r0, r3
 8000a92:	f003 f80b 	bl	8003aac <siprintf>
			  LCD_UpdateBuffer(1, cursor_position, formattedText);
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <main+0xd8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	463a      	mov	r2, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f7ff fecb 	bl	800083c <LCD_UpdateBuffer>
			  LCD_FlushBuffer();
 8000aa6:	f7ff fef9 	bl	800089c <LCD_FlushBuffer>
			  printed =1;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <main+0xd4>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
		  }
		  lock = 0;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <main+0xd0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
	  }
	  LCD_SetLocation(cursor_position,1);
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <main+0xd8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2101      	movs	r1, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fe74 	bl	80007ac <LCD_SetLocation>
	  if (lock == 1) {
 8000ac4:	e7cf      	b.n	8000a66 <main+0x6e>
 8000ac6:	bf00      	nop
 8000ac8:	200000b8 	.word	0x200000b8
 8000acc:	200000b9 	.word	0x200000b9
 8000ad0:	200000bc 	.word	0x200000bc
 8000ad4:	200000ba 	.word	0x200000ba
 8000ad8:	200000c0 	.word	0x200000c0
 8000adc:	20000150 	.word	0x20000150
 8000ae0:	0800446c 	.word	0x0800446c
 8000ae4:	20000004 	.word	0x20000004
 8000ae8:	0800447c 	.word	0x0800447c

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0a6      	sub	sp, #152	; 0x98
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000af6:	2228      	movs	r2, #40	; 0x28
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fff6 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2258      	movs	r2, #88	; 0x58
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 ffe8 	bl	8003aec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b20:	2301      	movs	r3, #1
 8000b22:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b24:	2310      	movs	r3, #16
 8000b26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b38:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b46:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fe04 	bl	8001758 <HAL_RCC_OscConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b56:	f000 f8dd 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b74:	2102      	movs	r1, #2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fe42 	bl	8002800 <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b82:	f000 f8c7 	bl	8000d14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
 8000b86:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000b8a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 f818 	bl	8002bcc <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ba2:	f000 f8b7 	bl	8000d14 <Error_Handler>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3798      	adds	r7, #152	; 0x98
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <InitDisplayField>:

/* USER CODE BEGIN 4 */
void InitDisplayField(char* displayField)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < LCD_X; i++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	e007      	b.n	8000bcc <InitDisplayField+0x1e>
        displayField[i] = 0;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < LCD_X; i++) {
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b0f      	cmp	r3, #15
 8000bd0:	ddf4      	ble.n	8000bbc <InitDisplayField+0xe>
    }
}
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <HAL_TIM_PeriodElapsedCallback>:
 return(ch);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET){
 8000be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bec:	4817      	ldr	r0, [pc, #92]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bee:	f000 fd6b 	bl	80016c8 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10e      	bne.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x36>
		if (cursor_position > 0) {
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x2a>
			cursor_position--;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c08:	6013      	str	r3, [r2, #0]
		}
		state = true;
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c12:	f002 fb29 	bl	8003268 <HAL_TIM_Base_Stop_IT>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 8000c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1a:	480c      	ldr	r0, [pc, #48]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000c1c:	f000 fd54 	bl	80016c8 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10e      	bne.n	8000c44 <HAL_TIM_PeriodElapsedCallback+0x64>
		if (cursor_position < LCD_X - 1) {
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b0e      	cmp	r3, #14
 8000c2c:	d804      	bhi.n	8000c38 <HAL_TIM_PeriodElapsedCallback+0x58>
		    cursor_position++;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c36:	6013      	str	r3, [r2, #0]
		}
		state = true;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c40:	f002 fb12 	bl	8003268 <HAL_TIM_Base_Stop_IT>
	}
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	48000400 	.word	0x48000400
 8000c50:	200000bc 	.word	0x200000bc
 8000c54:	200000ba 	.word	0x200000ba
 8000c58:	20000104 	.word	0x20000104

08000c5c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c6c:	d122      	bne.n	8000cb4 <HAL_GPIO_EXTI_Callback+0x58>
	  if (lock == 0) {
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d13d      	bne.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x98>
		  lock = 1;
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
		  if (displayField[cursor_position]<sizeof(alphabet)-2){
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c88:	2b19      	cmp	r3, #25
 8000c8a:	d809      	bhi.n	8000ca0 <HAL_GPIO_EXTI_Callback+0x44>
			  displayField[cursor_position]++;
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c96:	3201      	adds	r2, #1
 8000c98:	491a      	ldr	r1, [pc, #104]	; (8000d04 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000c9e:	e005      	b.n	8000cac <HAL_GPIO_EXTI_Callback+0x50>
		  }
		  else {
			  displayField[cursor_position]=0;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  }
	      printed = 0;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_GPIO_EXTI_Callback+0xac>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
  	}

   else {
	  __NOP();
  }
}
 8000cb2:	e01f      	b.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x98>
  } else if(GPIO_Pin == GPIO_PIN_14 && state == true){
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cba:	d10a      	bne.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x76>
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x76>
		HAL_TIM_Base_Start_IT(&htim2);
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000cc6:	f002 fa5f 	bl	8003188 <HAL_TIM_Base_Start_IT>
		state = false;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	e010      	b.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x98>
  } else if(GPIO_Pin == GPIO_PIN_15 && state == true){
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cd8:	d10a      	bne.n	8000cf0 <HAL_GPIO_EXTI_Callback+0x94>
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <HAL_GPIO_EXTI_Callback+0x94>
  		HAL_TIM_Base_Start_IT(&htim2);
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000ce4:	f002 fa50 	bl	8003188 <HAL_TIM_Base_Start_IT>
  		state = false;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e001      	b.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x98>
	  __NOP();
 8000cf0:	bf00      	nop
}
 8000cf2:	e7ff      	b.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x98>
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200000b8 	.word	0x200000b8
 8000d00:	200000bc 	.word	0x200000bc
 8000d04:	200000c0 	.word	0x200000c0
 8000d08:	200000b9 	.word	0x200000b9
 8000d0c:	200000ba 	.word	0x200000ba
 8000d10:	20000104 	.word	0x20000104

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_MspInit+0x44>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6193      	str	r3, [r2, #24]
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_MspInit+0x44>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x44>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x44>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x44>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f9a8 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <TIM2_IRQHandler+0x10>)
 8000dc2:	f002 fa80 	bl	80032c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000104 	.word	0x20000104

08000dd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000dd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dd8:	f000 fca6 	bl	8001728 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000ddc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000de0:	f000 fca2 	bl	8001728 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000de4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000de8:	f000 fc9e 	bl	8001728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f002 fe6c 	bl	8003afc <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20010000 	.word	0x20010000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	20000100 	.word	0x20000100
 8000e58:	200002e8 	.word	0x200002e8

08000e5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_TIM2_Init+0x98>)
 8000ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_TIM2_Init+0x98>)
 8000ea8:	2247      	movs	r2, #71	; 0x47
 8000eaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_TIM2_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_TIM2_Init+0x98>)
 8000eb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000eb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_TIM2_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_TIM2_Init+0x98>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec6:	4814      	ldr	r0, [pc, #80]	; (8000f18 <MX_TIM2_Init+0x98>)
 8000ec8:	f002 f89e 	bl	8003008 <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ed2:	f7ff ff1f 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_TIM2_Init+0x98>)
 8000ee4:	f002 fb0e 	bl	8003504 <HAL_TIM_ConfigClockSource>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eee:	f7ff ff11 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <MX_TIM2_Init+0x98>)
 8000f00:	f002 fd2a 	bl	8003958 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f0a:	f7ff ff03 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000104 	.word	0x20000104

08000f1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <MX_TIM3_Init+0x98>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f42:	2247      	movs	r2, #71	; 0x47
 8000f44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f60:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f62:	f002 f851 	bl	8003008 <HAL_TIM_Base_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f6c:	f7ff fed2 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f7e:	f002 fac1 	bl	8003504 <HAL_TIM_ConfigClockSource>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f88:	f7ff fec4 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f9a:	f002 fcdd 	bl	8003958 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000fa4:	f7ff feb6 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000150 	.word	0x20000150
 8000fb4:	40000400 	.word	0x40000400

08000fb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc8:	d114      	bne.n	8000ff4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_TIM_Base_MspInit+0x68>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <HAL_TIM_Base_MspInit+0x68>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_TIM_Base_MspInit+0x68>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	201c      	movs	r0, #28
 8000fe8:	f000 f9ad 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fec:	201c      	movs	r0, #28
 8000fee:	f000 f9c6 	bl	800137e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ff2:	e010      	b.n	8001016 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_TIM_Base_MspInit+0x6c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10b      	bne.n	8001016 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_TIM_Base_MspInit+0x68>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_TIM_Base_MspInit+0x68>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_TIM_Base_MspInit+0x68>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	40000400 	.word	0x40000400

08001028 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800102c:	f7ff ff16 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <LoopForever+0x6>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <LoopForever+0xe>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	; (8001074 <LoopForever+0x16>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f002 fd57 	bl	8003b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800105a:	f7ff fccd 	bl	80009f8 <main>

0800105e <LoopForever>:

LoopForever:
    b LoopForever
 800105e:	e7fe      	b.n	800105e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001060:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800106c:	080044ec 	.word	0x080044ec
  ldr r2, =_sbss
 8001070:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001074:	200002e8 	.word	0x200002e8

08001078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC1_2_IRQHandler>
	...

0800107c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_Init+0x28>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_Init+0x28>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f94f 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fe42 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f967 	bl	800139a <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f92f 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000020 	.word	0x20000020
 8001100:	20000028 	.word	0x20000028
 8001104:	20000024 	.word	0x20000024

08001108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000028 	.word	0x20000028
 800112c:	2000019c 	.word	0x2000019c

08001130 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;  
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000019c 	.word	0x2000019c

08001148 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000028 	.word	0x20000028

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff3e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff31 	bl	80011f4 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	e160      	b.n	8001686 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8152 	beq.w	8001680 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d005      	beq.n	80013f4 <HAL_GPIO_Init+0x40>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d130      	bne.n	8001456 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800142a:	2201      	movs	r2, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	f003 0201 	and.w	r2, r3, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b03      	cmp	r3, #3
 8001460:	d017      	beq.n	8001492 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d123      	bne.n	80014e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	6939      	ldr	r1, [r7, #16]
 80014e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0203 	and.w	r2, r3, #3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80ac 	beq.w	8001680 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001528:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <HAL_GPIO_Init+0x2f0>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a5d      	ldr	r2, [pc, #372]	; (80016a4 <HAL_GPIO_Init+0x2f0>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <HAL_GPIO_Init+0x2f0>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001540:	4a59      	ldr	r2, [pc, #356]	; (80016a8 <HAL_GPIO_Init+0x2f4>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800156a:	d025      	beq.n	80015b8 <HAL_GPIO_Init+0x204>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a4f      	ldr	r2, [pc, #316]	; (80016ac <HAL_GPIO_Init+0x2f8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d01f      	beq.n	80015b4 <HAL_GPIO_Init+0x200>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a4e      	ldr	r2, [pc, #312]	; (80016b0 <HAL_GPIO_Init+0x2fc>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d019      	beq.n	80015b0 <HAL_GPIO_Init+0x1fc>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a4d      	ldr	r2, [pc, #308]	; (80016b4 <HAL_GPIO_Init+0x300>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d013      	beq.n	80015ac <HAL_GPIO_Init+0x1f8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a4c      	ldr	r2, [pc, #304]	; (80016b8 <HAL_GPIO_Init+0x304>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00d      	beq.n	80015a8 <HAL_GPIO_Init+0x1f4>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <HAL_GPIO_Init+0x308>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d007      	beq.n	80015a4 <HAL_GPIO_Init+0x1f0>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a4a      	ldr	r2, [pc, #296]	; (80016c0 <HAL_GPIO_Init+0x30c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d101      	bne.n	80015a0 <HAL_GPIO_Init+0x1ec>
 800159c:	2306      	movs	r3, #6
 800159e:	e00c      	b.n	80015ba <HAL_GPIO_Init+0x206>
 80015a0:	2307      	movs	r3, #7
 80015a2:	e00a      	b.n	80015ba <HAL_GPIO_Init+0x206>
 80015a4:	2305      	movs	r3, #5
 80015a6:	e008      	b.n	80015ba <HAL_GPIO_Init+0x206>
 80015a8:	2304      	movs	r3, #4
 80015aa:	e006      	b.n	80015ba <HAL_GPIO_Init+0x206>
 80015ac:	2303      	movs	r3, #3
 80015ae:	e004      	b.n	80015ba <HAL_GPIO_Init+0x206>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0x206>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_GPIO_Init+0x206>
 80015b8:	2300      	movs	r3, #0
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	f002 0203 	and.w	r2, r2, #3
 80015c0:	0092      	lsls	r2, r2, #2
 80015c2:	4093      	lsls	r3, r2
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015ca:	4937      	ldr	r1, [pc, #220]	; (80016a8 <HAL_GPIO_Init+0x2f4>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d8:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <HAL_GPIO_Init+0x310>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015fc:	4a31      	ldr	r2, [pc, #196]	; (80016c4 <HAL_GPIO_Init+0x310>)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001602:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <HAL_GPIO_Init+0x310>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001626:	4a27      	ldr	r2, [pc, #156]	; (80016c4 <HAL_GPIO_Init+0x310>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800162c:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_GPIO_Init+0x310>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001650:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <HAL_GPIO_Init+0x310>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_GPIO_Init+0x310>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <HAL_GPIO_Init+0x310>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	f47f ae97 	bne.w	80013c4 <HAL_GPIO_Init+0x10>
  }
}
 8001696:	bf00      	nop
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010000 	.word	0x40010000
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000c00 	.word	0x48000c00
 80016b8:	48001000 	.word	0x48001000
 80016bc:	48001400 	.word	0x48001400
 80016c0:	48001800 	.word	0x48001800
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e001      	b.n	80016ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001714:	e002      	b.n	800171c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d006      	beq.n	800174c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fa88 	bl	8000c5c <HAL_GPIO_EXTI_Callback>
  }
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800175e:	af00      	add	r7, sp, #0
 8001760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001764:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001768:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800176a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	f001 b83a 	b.w	80027f2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001782:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 816f 	beq.w	8001a72 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001794:	4bb5      	ldr	r3, [pc, #724]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b04      	cmp	r3, #4
 800179e:	d00c      	beq.n	80017ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a0:	4bb2      	ldr	r3, [pc, #712]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d15c      	bne.n	8001866 <HAL_RCC_OscConfig+0x10e>
 80017ac:	4baf      	ldr	r3, [pc, #700]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b8:	d155      	bne.n	8001866 <HAL_RCC_OscConfig+0x10e>
 80017ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <HAL_RCC_OscConfig+0x94>
 80017e6:	4ba1      	ldr	r3, [pc, #644]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	e015      	b.n	8001818 <HAL_RCC_OscConfig+0xc0>
 80017ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001804:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001808:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001814:	4b95      	ldr	r3, [pc, #596]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800181c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001820:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001824:	fa92 f2a2 	rbit	r2, r2
 8001828:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800182c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001830:	fab2 f282 	clz	r2, r2
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f042 0220 	orr.w	r2, r2, #32
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f002 021f 	and.w	r2, r2, #31
 8001840:	2101      	movs	r1, #1
 8001842:	fa01 f202 	lsl.w	r2, r1, r2
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8111 	beq.w	8001a70 <HAL_RCC_OscConfig+0x318>
 800184e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001852:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 8108 	bne.w	8001a70 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	f000 bfc6 	b.w	80027f2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x12e>
 8001878:	4b7c      	ldr	r3, [pc, #496]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a7b      	ldr	r2, [pc, #492]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 800187e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e036      	b.n	80018f4 <HAL_RCC_OscConfig+0x19c>
 8001886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x158>
 8001896:	4b75      	ldr	r3, [pc, #468]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a74      	ldr	r2, [pc, #464]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 800189c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b72      	ldr	r3, [pc, #456]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a71      	ldr	r2, [pc, #452]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80018a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e021      	b.n	80018f4 <HAL_RCC_OscConfig+0x19c>
 80018b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x184>
 80018c2:	4b6a      	ldr	r3, [pc, #424]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a69      	ldr	r2, [pc, #420]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b67      	ldr	r3, [pc, #412]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a66      	ldr	r2, [pc, #408]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0x19c>
 80018dc:	4b63      	ldr	r3, [pc, #396]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a62      	ldr	r2, [pc, #392]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b60      	ldr	r3, [pc, #384]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a5f      	ldr	r2, [pc, #380]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d059      	beq.n	80019b8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fc14 	bl	8001130 <HAL_GetTick>
 8001908:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190e:	f7ff fc0f 	bl	8001130 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d902      	bls.n	8001924 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	f000 bf67 	b.w	80027f2 <HAL_RCC_OscConfig+0x109a>
 8001924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001928:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001938:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d102      	bne.n	8001956 <HAL_RCC_OscConfig+0x1fe>
 8001950:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x22a>
 8001956:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800196a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001972:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001986:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800198a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800198e:	fa92 f2a2 	rbit	r2, r2
 8001992:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001996:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800199a:	fab2 f282 	clz	r2, r2
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	f042 0220 	orr.w	r2, r2, #32
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	f002 021f 	and.w	r2, r2, #31
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f202 	lsl.w	r2, r1, r2
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0ab      	beq.n	800190e <HAL_RCC_OscConfig+0x1b6>
 80019b6:	e05c      	b.n	8001a72 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fbba 	bl	8001130 <HAL_GetTick>
 80019bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c2:	f7ff fbb5 	bl	8001130 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d902      	bls.n	80019d8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	f000 bf0d 	b.w	80027f2 <HAL_RCC_OscConfig+0x109a>
 80019d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019dc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80019ec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d102      	bne.n	8001a0a <HAL_RCC_OscConfig+0x2b2>
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	e015      	b.n	8001a36 <HAL_RCC_OscConfig+0x2de>
 8001a0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_RCC_OscConfig+0x314>)
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a3a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a3e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001a42:	fa92 f2a2 	rbit	r2, r2
 8001a46:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001a4a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a4e:	fab2 f282 	clz	r2, r2
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	f042 0220 	orr.w	r2, r2, #32
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	f002 021f 	and.w	r2, r2, #31
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1ab      	bne.n	80019c2 <HAL_RCC_OscConfig+0x26a>
 8001a6a:	e002      	b.n	8001a72 <HAL_RCC_OscConfig+0x31a>
 8001a6c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 817f 	beq.w	8001d86 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a88:	4ba7      	ldr	r3, [pc, #668]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00c      	beq.n	8001aae <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a94:	4ba4      	ldr	r3, [pc, #656]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d173      	bne.n	8001b88 <HAL_RCC_OscConfig+0x430>
 8001aa0:	4ba1      	ldr	r3, [pc, #644]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aac:	d16c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x430>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001ac0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d102      	bne.n	8001ade <HAL_RCC_OscConfig+0x386>
 8001ad8:	4b93      	ldr	r3, [pc, #588]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	e013      	b.n	8001b06 <HAL_RCC_OscConfig+0x3ae>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001af0:	2302      	movs	r3, #2
 8001af2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001af6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001afa:	fa93 f3a3 	rbit	r3, r3
 8001afe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	2202      	movs	r2, #2
 8001b08:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001b0c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001b10:	fa92 f2a2 	rbit	r2, r2
 8001b14:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001b18:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b1c:	fab2 f282 	clz	r2, r2
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f042 0220 	orr.w	r2, r2, #32
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f002 021f 	and.w	r2, r2, #31
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00a      	beq.n	8001b4e <HAL_RCC_OscConfig+0x3f6>
 8001b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d002      	beq.n	8001b4e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f000 be52 	b.w	80027f2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b76      	ldr	r3, [pc, #472]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	21f8      	movs	r1, #248	; 0xf8
 8001b64:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001b6c:	fa91 f1a1 	rbit	r1, r1
 8001b70:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001b74:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b78:	fab1 f181 	clz	r1, r1
 8001b7c:	b2c9      	uxtb	r1, r1
 8001b7e:	408b      	lsls	r3, r1
 8001b80:	4969      	ldr	r1, [pc, #420]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	e0fe      	b.n	8001d86 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8088 	beq.w	8001caa <HAL_RCC_OscConfig+0x552>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001bac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fab3 	bl	8001130 <HAL_GetTick>
 8001bca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd0:	f7ff faae 	bl	8001130 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d902      	bls.n	8001be6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	f000 be06 	b.w	80027f2 <HAL_RCC_OscConfig+0x109a>
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001bf8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d102      	bne.n	8001c16 <HAL_RCC_OscConfig+0x4be>
 8001c10:	4b45      	ldr	r3, [pc, #276]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	e013      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e6>
 8001c16:	2302      	movs	r3, #2
 8001c18:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c28:	2302      	movs	r3, #2
 8001c2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c2e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c3a:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001c44:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c48:	fa92 f2a2 	rbit	r2, r2
 8001c4c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001c50:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c54:	fab2 f282 	clz	r2, r2
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	f042 0220 	orr.w	r2, r2, #32
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	f002 021f 	and.w	r2, r2, #31
 8001c64:	2101      	movs	r1, #1
 8001c66:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0af      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	21f8      	movs	r1, #248	; 0xf8
 8001c86:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001c8e:	fa91 f1a1 	rbit	r1, r1
 8001c92:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001c96:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c9a:	fab1 f181 	clz	r1, r1
 8001c9e:	b2c9      	uxtb	r1, r1
 8001ca0:	408b      	lsls	r3, r1
 8001ca2:	4921      	ldr	r1, [pc, #132]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
 8001ca8:	e06d      	b.n	8001d86 <HAL_RCC_OscConfig+0x62e>
 8001caa:	2301      	movs	r3, #1
 8001cac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001cbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fa2b 	bl	8001130 <HAL_GetTick>
 8001cda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fa26 	bl	8001130 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d902      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	f000 bd7e 	b.w	80027f2 <HAL_RCC_OscConfig+0x109a>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001d08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5d4>
 8001d20:	4b01      	ldr	r3, [pc, #4]	; (8001d28 <HAL_RCC_OscConfig+0x5d0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e016      	b.n	8001d54 <HAL_RCC_OscConfig+0x5fc>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d50:	4bbf      	ldr	r3, [pc, #764]	; (8002050 <HAL_RCC_OscConfig+0x8f8>)
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	2202      	movs	r2, #2
 8001d56:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d5a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d5e:	fa92 f2a2 	rbit	r2, r2
 8001d62:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001d66:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d6a:	fab2 f282 	clz	r2, r2
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f042 0220 	orr.w	r2, r2, #32
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f002 021f 	and.w	r2, r2, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ac      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8113 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d07c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x74e>
 8001dac:	2301      	movs	r3, #1
 8001dae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001dbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4ba2      	ldr	r3, [pc, #648]	; (8002054 <HAL_RCC_OscConfig+0x8fc>)
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f9ab 	bl	8001130 <HAL_GetTick>
 8001dda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff f9a6 	bl	8001130 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d902      	bls.n	8001df6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	f000 bcfe 	b.w	80027f2 <HAL_RCC_OscConfig+0x109a>
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e16:	2202      	movs	r2, #2
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	4b7e      	ldr	r3, [pc, #504]	; (8002050 <HAL_RCC_OscConfig+0x8f8>)
 8001e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e62:	2102      	movs	r1, #2
 8001e64:	6019      	str	r1, [r3, #0]
 8001e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f1a3 	rbit	r1, r3
 8001e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e7c:	6019      	str	r1, [r3, #0]
  return result;
 8001e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2101      	movs	r1, #1
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d09d      	beq.n	8001de0 <HAL_RCC_OscConfig+0x688>
 8001ea4:	e08d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x86a>
 8001ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eaa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ec8:	601a      	str	r2, [r3, #0]
  return result;
 8001eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ece:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ed2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b5d      	ldr	r3, [pc, #372]	; (8002054 <HAL_RCC_OscConfig+0x8fc>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff f922 	bl	8001130 <HAL_GetTick>
 8001eec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f91d 	bl	8001130 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d902      	bls.n	8001f08 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	f000 bc75 	b.w	80027f2 <HAL_RCC_OscConfig+0x109a>
 8001f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f10:	2202      	movs	r2, #2
 8001f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	fa93 f2a3 	rbit	r2, r3
 8001f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f34:	2202      	movs	r2, #2
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	fa93 f2a3 	rbit	r2, r3
 8001f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f58:	2202      	movs	r2, #2
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCC_OscConfig+0x8f8>)
 8001f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f80:	2102      	movs	r1, #2
 8001f82:	6019      	str	r1, [r3, #0]
 8001f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	fa93 f1a3 	rbit	r1, r3
 8001f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f96:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f9a:	6019      	str	r1, [r3, #0]
  return result;
 8001f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d197      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 81a5 	beq.w	8002322 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <HAL_RCC_OscConfig+0x8f8>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d116      	bne.n	8002018 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_RCC_OscConfig+0x8f8>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_RCC_OscConfig+0x8f8>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_RCC_OscConfig+0x8f8>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002010:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002012:	2301      	movs	r3, #1
 8002014:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_RCC_OscConfig+0x900>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d121      	bne.n	8002068 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_RCC_OscConfig+0x900>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <HAL_RCC_OscConfig+0x900>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002030:	f7ff f87e 	bl	8001130 <HAL_GetTick>
 8002034:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e010      	b.n	800205c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7ff f879 	bl	8001130 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d908      	bls.n	800205c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e3d1      	b.n	80027f2 <HAL_RCC_OscConfig+0x109a>
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	10908120 	.word	0x10908120
 8002058:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	4b8d      	ldr	r3, [pc, #564]	; (8002294 <HAL_RCC_OscConfig+0xb3c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0e8      	beq.n	800203a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x92e>
 8002078:	4b87      	ldr	r3, [pc, #540]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4a86      	ldr	r2, [pc, #536]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6213      	str	r3, [r2, #32]
 8002084:	e035      	b.n	80020f2 <HAL_RCC_OscConfig+0x99a>
 8002086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x958>
 8002096:	4b80      	ldr	r3, [pc, #512]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a7f      	ldr	r2, [pc, #508]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6213      	str	r3, [r2, #32]
 80020a2:	4b7d      	ldr	r3, [pc, #500]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a7c      	ldr	r2, [pc, #496]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	e020      	b.n	80020f2 <HAL_RCC_OscConfig+0x99a>
 80020b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d10c      	bne.n	80020da <HAL_RCC_OscConfig+0x982>
 80020c0:	4b75      	ldr	r3, [pc, #468]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a74      	ldr	r2, [pc, #464]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	4b72      	ldr	r3, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4a71      	ldr	r2, [pc, #452]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6213      	str	r3, [r2, #32]
 80020d8:	e00b      	b.n	80020f2 <HAL_RCC_OscConfig+0x99a>
 80020da:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6213      	str	r3, [r2, #32]
 80020e6:	4b6c      	ldr	r3, [pc, #432]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4a6b      	ldr	r2, [pc, #428]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8081 	beq.w	8002206 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7ff f814 	bl	8001130 <HAL_GetTick>
 8002108:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210c:	e00b      	b.n	8002126 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff f80f 	bl	8001130 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e365      	b.n	80027f2 <HAL_RCC_OscConfig+0x109a>
 8002126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800212e:	2202      	movs	r2, #2
 8002130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002136:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fa93 f2a3 	rbit	r2, r3
 8002140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002144:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002152:	2202      	movs	r2, #2
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	fa93 f2a3 	rbit	r2, r3
 8002164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002168:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800216c:	601a      	str	r2, [r3, #0]
  return result;
 800216e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002172:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002176:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f043 0302 	orr.w	r3, r3, #2
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d102      	bne.n	8002192 <HAL_RCC_OscConfig+0xa3a>
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	e013      	b.n	80021ba <HAL_RCC_OscConfig+0xa62>
 8002192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002196:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800219a:	2202      	movs	r2, #2
 800219c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fa93 f2a3 	rbit	r2, r3
 80021ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021be:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021c2:	2102      	movs	r1, #2
 80021c4:	6011      	str	r1, [r2, #0]
 80021c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	fa92 f1a2 	rbit	r1, r2
 80021d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021d8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80021dc:	6011      	str	r1, [r2, #0]
  return result;
 80021de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021e2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	fab2 f282 	clz	r2, r2
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	f002 021f 	and.w	r2, r2, #31
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d084      	beq.n	800210e <HAL_RCC_OscConfig+0x9b6>
 8002204:	e083      	b.n	800230e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7fe ff93 	bl	8001130 <HAL_GetTick>
 800220a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7fe ff8e 	bl	8001130 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e2e4      	b.n	80027f2 <HAL_RCC_OscConfig+0x109a>
 8002228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002230:	2202      	movs	r2, #2
 8002232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002238:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fa93 f2a3 	rbit	r2, r3
 8002242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002246:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002250:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002254:	2202      	movs	r2, #2
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800225c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f2a3 	rbit	r2, r3
 8002266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800226e:	601a      	str	r2, [r3, #0]
  return result;
 8002270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002274:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002278:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d106      	bne.n	800229c <HAL_RCC_OscConfig+0xb44>
 800228e:	4b02      	ldr	r3, [pc, #8]	; (8002298 <HAL_RCC_OscConfig+0xb40>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	e017      	b.n	80022c4 <HAL_RCC_OscConfig+0xb6c>
 8002294:	40007000 	.word	0x40007000
 8002298:	40021000 	.word	0x40021000
 800229c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80022a4:	2202      	movs	r2, #2
 80022a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	fa93 f2a3 	rbit	r2, r3
 80022b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ba:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	4bb3      	ldr	r3, [pc, #716]	; (8002590 <HAL_RCC_OscConfig+0xe38>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022cc:	2102      	movs	r1, #2
 80022ce:	6011      	str	r1, [r2, #0]
 80022d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	fa92 f1a2 	rbit	r1, r2
 80022de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022e2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80022e6:	6011      	str	r1, [r2, #0]
  return result;
 80022e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022ec:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fab2 f282 	clz	r2, r2
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f002 021f 	and.w	r2, r2, #31
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d180      	bne.n	8002210 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800230e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002312:	2b01      	cmp	r3, #1
 8002314:	d105      	bne.n	8002322 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002316:	4b9e      	ldr	r3, [pc, #632]	; (8002590 <HAL_RCC_OscConfig+0xe38>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	4a9d      	ldr	r2, [pc, #628]	; (8002590 <HAL_RCC_OscConfig+0xe38>)
 800231c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002320:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002326:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 825e 	beq.w	80027f0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002334:	4b96      	ldr	r3, [pc, #600]	; (8002590 <HAL_RCC_OscConfig+0xe38>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	f000 821f 	beq.w	8002780 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002346:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b02      	cmp	r3, #2
 8002350:	f040 8170 	bne.w	8002634 <HAL_RCC_OscConfig+0xedc>
 8002354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002358:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800235c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002366:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fa93 f2a3 	rbit	r2, r3
 8002370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002374:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002378:	601a      	str	r2, [r3, #0]
  return result;
 800237a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002382:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800238e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	2300      	movs	r3, #0
 8002398:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe fec9 	bl	8001130 <HAL_GetTick>
 800239e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	e009      	b.n	80023b8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe fec4 	bl	8001130 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e21c      	b.n	80027f2 <HAL_RCC_OscConfig+0x109a>
 80023b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023bc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	fa93 f2a3 	rbit	r2, r3
 80023d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023dc:	601a      	str	r2, [r3, #0]
  return result;
 80023de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d102      	bne.n	8002402 <HAL_RCC_OscConfig+0xcaa>
 80023fc:	4b64      	ldr	r3, [pc, #400]	; (8002590 <HAL_RCC_OscConfig+0xe38>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	e027      	b.n	8002452 <HAL_RCC_OscConfig+0xcfa>
 8002402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002406:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800240a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800240e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002414:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002422:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	fa93 f2a3 	rbit	r2, r3
 8002444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002448:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	4b50      	ldr	r3, [pc, #320]	; (8002590 <HAL_RCC_OscConfig+0xe38>)
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002456:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800245a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800245e:	6011      	str	r1, [r2, #0]
 8002460:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002464:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	fa92 f1a2 	rbit	r1, r2
 800246e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002472:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002476:	6011      	str	r1, [r2, #0]
  return result;
 8002478:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800247c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f042 0220 	orr.w	r2, r2, #32
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d182      	bne.n	80023a4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800249e:	4b3c      	ldr	r3, [pc, #240]	; (8002590 <HAL_RCC_OscConfig+0xe38>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	f023 020f 	bic.w	r2, r3, #15
 80024a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	4937      	ldr	r1, [pc, #220]	; (8002590 <HAL_RCC_OscConfig+0xe38>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80024b8:	4b35      	ldr	r3, [pc, #212]	; (8002590 <HAL_RCC_OscConfig+0xe38>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80024c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6a19      	ldr	r1, [r3, #32]
 80024cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	430b      	orrs	r3, r1
 80024da:	492d      	ldr	r1, [pc, #180]	; (8002590 <HAL_RCC_OscConfig+0xe38>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
 80024e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fa93 f2a3 	rbit	r2, r3
 80024fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002500:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002504:	601a      	str	r2, [r3, #0]
  return result;
 8002506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800250e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800251a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	461a      	mov	r2, r3
 8002522:	2301      	movs	r3, #1
 8002524:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7fe fe03 	bl	8001130 <HAL_GetTick>
 800252a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252e:	e009      	b.n	8002544 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe fdfe 	bl	8001130 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e156      	b.n	80027f2 <HAL_RCC_OscConfig+0x109a>
 8002544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002548:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800254c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002556:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fa93 f2a3 	rbit	r2, r3
 8002560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002564:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002568:	601a      	str	r2, [r3, #0]
  return result;
 800256a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002572:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0xe3c>
 8002588:	4b01      	ldr	r3, [pc, #4]	; (8002590 <HAL_RCC_OscConfig+0xe38>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	e02a      	b.n	80025e4 <HAL_RCC_OscConfig+0xe8c>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002598:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800259c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fa93 f2a3 	rbit	r2, r3
 80025b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025be:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025cc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	fa93 f2a3 	rbit	r2, r3
 80025d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025da:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	4b86      	ldr	r3, [pc, #536]	; (80027fc <HAL_RCC_OscConfig+0x10a4>)
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025e8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025f0:	6011      	str	r1, [r2, #0]
 80025f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025f6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	fa92 f1a2 	rbit	r1, r2
 8002600:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002604:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002608:	6011      	str	r1, [r2, #0]
  return result;
 800260a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800260e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	fab2 f282 	clz	r2, r2
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	f042 0220 	orr.w	r2, r2, #32
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	f002 021f 	and.w	r2, r2, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f202 	lsl.w	r2, r1, r2
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	f43f af7f 	beq.w	8002530 <HAL_RCC_OscConfig+0xdd8>
 8002632:	e0dd      	b.n	80027f0 <HAL_RCC_OscConfig+0x1098>
 8002634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002638:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800263c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002646:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	fa93 f2a3 	rbit	r2, r3
 8002650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002654:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002658:	601a      	str	r2, [r3, #0]
  return result;
 800265a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002662:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800266e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	461a      	mov	r2, r3
 8002676:	2300      	movs	r3, #0
 8002678:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7fe fd59 	bl	8001130 <HAL_GetTick>
 800267e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002682:	e009      	b.n	8002698 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fd54 	bl	8001130 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0ac      	b.n	80027f2 <HAL_RCC_OscConfig+0x109a>
 8002698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026aa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	fa93 f2a3 	rbit	r2, r3
 80026b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026bc:	601a      	str	r2, [r3, #0]
  return result;
 80026be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_OscConfig+0xf8a>
 80026dc:	4b47      	ldr	r3, [pc, #284]	; (80027fc <HAL_RCC_OscConfig+0x10a4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e027      	b.n	8002732 <HAL_RCC_OscConfig+0xfda>
 80026e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	fa93 f2a3 	rbit	r2, r3
 80026fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002702:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800270c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800271a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	fa93 f2a3 	rbit	r2, r3
 8002724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002728:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	4b33      	ldr	r3, [pc, #204]	; (80027fc <HAL_RCC_OscConfig+0x10a4>)
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002736:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800273a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800273e:	6011      	str	r1, [r2, #0]
 8002740:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002744:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	fa92 f1a2 	rbit	r1, r2
 800274e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002752:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002756:	6011      	str	r1, [r2, #0]
  return result;
 8002758:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800275c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	fab2 f282 	clz	r2, r2
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f042 0220 	orr.w	r2, r2, #32
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f002 021f 	and.w	r2, r2, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d182      	bne.n	8002684 <HAL_RCC_OscConfig+0xf2c>
 800277e:	e037      	b.n	80027f0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002784:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e02e      	b.n	80027f2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_RCC_OscConfig+0x10a4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800279c:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_RCC_OscConfig+0x10a4>)
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80027a8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80027ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d117      	bne.n	80027ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80027bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80027c0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d10b      	bne.n	80027ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80027d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000

08002800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b09e      	sub	sp, #120	; 0x78
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e162      	b.n	8002ade <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002818:	4b90      	ldr	r3, [pc, #576]	; (8002a5c <HAL_RCC_ClockConfig+0x25c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d910      	bls.n	8002848 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b8d      	ldr	r3, [pc, #564]	; (8002a5c <HAL_RCC_ClockConfig+0x25c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 0207 	bic.w	r2, r3, #7
 800282e:	498b      	ldr	r1, [pc, #556]	; (8002a5c <HAL_RCC_ClockConfig+0x25c>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b89      	ldr	r3, [pc, #548]	; (8002a5c <HAL_RCC_ClockConfig+0x25c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e14a      	b.n	8002ade <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b82      	ldr	r3, [pc, #520]	; (8002a60 <HAL_RCC_ClockConfig+0x260>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	497f      	ldr	r1, [pc, #508]	; (8002a60 <HAL_RCC_ClockConfig+0x260>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80dc 	beq.w	8002a2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d13c      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xf6>
 800287c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002880:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800288a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b01      	cmp	r3, #1
 800289e:	d102      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xa6>
 80028a0:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <HAL_RCC_ClockConfig+0x260>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	e00f      	b.n	80028c6 <HAL_RCC_ClockConfig+0xc6>
 80028a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	667b      	str	r3, [r7, #100]	; 0x64
 80028b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b8:	663b      	str	r3, [r7, #96]	; 0x60
 80028ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028c2:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <HAL_RCC_ClockConfig+0x260>)
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80028cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028ce:	fa92 f2a2 	rbit	r2, r2
 80028d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028d6:	fab2 f282 	clz	r2, r2
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	f042 0220 	orr.w	r2, r2, #32
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	f002 021f 	and.w	r2, r2, #31
 80028e6:	2101      	movs	r1, #1
 80028e8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d17b      	bne.n	80029ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0f3      	b.n	8002ade <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d13c      	bne.n	8002978 <HAL_RCC_ClockConfig+0x178>
 80028fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002902:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800290c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d102      	bne.n	8002928 <HAL_RCC_ClockConfig+0x128>
 8002922:	4b4f      	ldr	r3, [pc, #316]	; (8002a60 <HAL_RCC_ClockConfig+0x260>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	e00f      	b.n	8002948 <HAL_RCC_ClockConfig+0x148>
 8002928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800292c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	647b      	str	r3, [r7, #68]	; 0x44
 8002936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800293a:	643b      	str	r3, [r7, #64]	; 0x40
 800293c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002944:	4b46      	ldr	r3, [pc, #280]	; (8002a60 <HAL_RCC_ClockConfig+0x260>)
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800294c:	63ba      	str	r2, [r7, #56]	; 0x38
 800294e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002950:	fa92 f2a2 	rbit	r2, r2
 8002954:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002958:	fab2 f282 	clz	r2, r2
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f042 0220 	orr.w	r2, r2, #32
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	f002 021f 	and.w	r2, r2, #31
 8002968:	2101      	movs	r1, #1
 800296a:	fa01 f202 	lsl.w	r2, r1, r2
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d13a      	bne.n	80029ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0b2      	b.n	8002ade <HAL_RCC_ClockConfig+0x2de>
 8002978:	2302      	movs	r3, #2
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x1a0>
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <HAL_RCC_ClockConfig+0x260>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	e00d      	b.n	80029bc <HAL_RCC_ClockConfig+0x1bc>
 80029a0:	2302      	movs	r3, #2
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
 80029ac:	2302      	movs	r3, #2
 80029ae:	623b      	str	r3, [r7, #32]
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <HAL_RCC_ClockConfig+0x260>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2202      	movs	r2, #2
 80029be:	61ba      	str	r2, [r7, #24]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	fa92 f2a2 	rbit	r2, r2
 80029c6:	617a      	str	r2, [r7, #20]
  return result;
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	fab2 f282 	clz	r2, r2
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f042 0220 	orr.w	r2, r2, #32
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	f002 021f 	and.w	r2, r2, #31
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e079      	b.n	8002ade <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_RCC_ClockConfig+0x260>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	491a      	ldr	r1, [pc, #104]	; (8002a60 <HAL_RCC_ClockConfig+0x260>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fc:	f7fe fb98 	bl	8001130 <HAL_GetTick>
 8002a00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7fe fb94 	bl	8001130 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e061      	b.n	8002ade <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <HAL_RCC_ClockConfig+0x260>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_ClockConfig+0x25c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d214      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <HAL_RCC_ClockConfig+0x25c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 0207 	bic.w	r2, r3, #7
 8002a42:	4906      	ldr	r1, [pc, #24]	; (8002a5c <HAL_RCC_ClockConfig+0x25c>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_RCC_ClockConfig+0x25c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e040      	b.n	8002ade <HAL_RCC_ClockConfig+0x2de>
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a70:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	491a      	ldr	r1, [pc, #104]	; (8002ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4912      	ldr	r1, [pc, #72]	; (8002ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002aa2:	f000 f829 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002aa6:	4601      	mov	r1, r0
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab0:	22f0      	movs	r2, #240	; 0xf0
 8002ab2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	fa92 f2a2 	rbit	r2, r2
 8002aba:	60fa      	str	r2, [r7, #12]
  return result;
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	fab2 f282 	clz	r2, r2
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	40d3      	lsrs	r3, r2
 8002ac6:	4a09      	ldr	r2, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x2ec>)
 8002ac8:	5cd3      	ldrb	r3, [r2, r3]
 8002aca:	fa21 f303 	lsr.w	r3, r1, r3
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_RCC_ClockConfig+0x2f0>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_RCC_ClockConfig+0x2f4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fae6 	bl	80010a8 <HAL_InitTick>
  
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3778      	adds	r7, #120	; 0x78
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08004480 	.word	0x08004480
 8002af0:	20000020 	.word	0x20000020
 8002af4:	20000024 	.word	0x20000024

08002af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b08b      	sub	sp, #44	; 0x2c
 8002afc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b12:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d002      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x30>
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x36>
 8002b26:	e03f      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b2a:	623b      	str	r3, [r7, #32]
      break;
 8002b2c:	e03f      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	fa92 f2a2 	rbit	r2, r2
 8002b40:	607a      	str	r2, [r7, #4]
  return result;
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	fab2 f282 	clz	r2, r2
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	40d3      	lsrs	r3, r2
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b4e:	5cd3      	ldrb	r3, [r2, r3]
 8002b50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	220f      	movs	r2, #15
 8002b5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	fa92 f2a2 	rbit	r2, r2
 8002b64:	60fa      	str	r2, [r7, #12]
  return result;
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	fab2 f282 	clz	r2, r2
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	40d3      	lsrs	r3, r2
 8002b70:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b80:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b90:	e007      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	623b      	str	r3, [r7, #32]
      break;
 8002ba6:	e002      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002baa:	623b      	str	r3, [r7, #32]
      break;
 8002bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bae:	6a3b      	ldr	r3, [r7, #32]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	372c      	adds	r7, #44	; 0x2c
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	007a1200 	.word	0x007a1200
 8002bc4:	08004490 	.word	0x08004490
 8002bc8:	080044a0 	.word	0x080044a0

08002bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b092      	sub	sp, #72	; 0x48
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80d4 	beq.w	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf0:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10e      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfc:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	4a4a      	ldr	r2, [pc, #296]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c06:	61d3      	str	r3, [r2, #28]
 8002c08:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d118      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c26:	4b42      	ldr	r3, [pc, #264]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a41      	ldr	r2, [pc, #260]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c32:	f7fe fa7d 	bl	8001130 <HAL_GetTick>
 8002c36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	e008      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3a:	f7fe fa79 	bl	8001130 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b64      	cmp	r3, #100	; 0x64
 8002c46:	d901      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e1d6      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c58:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8084 	beq.w	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d07c      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c78:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cca:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d04b      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7fe fa29 	bl	8001130 <HAL_GetTick>
 8002cde:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fe fa25 	bl	8001130 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e180      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
 8002d04:	2302      	movs	r3, #2
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	61fb      	str	r3, [r7, #28]
  return result;
 8002d10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d108      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d26:	4b01      	ldr	r3, [pc, #4]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	e00d      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40007000 	.word	0x40007000
 8002d34:	10908100 	.word	0x10908100
 8002d38:	2302      	movs	r3, #2
 8002d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	4b9a      	ldr	r3, [pc, #616]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2202      	movs	r2, #2
 8002d4a:	613a      	str	r2, [r7, #16]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	fa92 f2a2 	rbit	r2, r2
 8002d52:	60fa      	str	r2, [r7, #12]
  return result;
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	fab2 f282 	clz	r2, r2
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	f002 021f 	and.w	r2, r2, #31
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0b7      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d72:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	498c      	ldr	r1, [pc, #560]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d105      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8c:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	4a87      	ldr	r2, [pc, #540]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da4:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f023 0203 	bic.w	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	497f      	ldr	r1, [pc, #508]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc2:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4978      	ldr	r1, [pc, #480]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de0:	4b73      	ldr	r3, [pc, #460]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	4970      	ldr	r1, [pc, #448]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dfe:	4b6c      	ldr	r3, [pc, #432]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f023 0210 	bic.w	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	4969      	ldr	r1, [pc, #420]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e1c:	4b64      	ldr	r3, [pc, #400]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e28:	4961      	ldr	r1, [pc, #388]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e3a:	4b5d      	ldr	r3, [pc, #372]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f023 0220 	bic.w	r2, r3, #32
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	495a      	ldr	r1, [pc, #360]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e58:	4b55      	ldr	r3, [pc, #340]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	4952      	ldr	r1, [pc, #328]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e76:	4b4e      	ldr	r3, [pc, #312]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	494b      	ldr	r1, [pc, #300]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e94:	4b46      	ldr	r3, [pc, #280]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4943      	ldr	r1, [pc, #268]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	493c      	ldr	r1, [pc, #240]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ed0:	4b37      	ldr	r3, [pc, #220]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	4934      	ldr	r1, [pc, #208]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002eee:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	492d      	ldr	r1, [pc, #180]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f0c:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	4925      	ldr	r1, [pc, #148]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	491e      	ldr	r1, [pc, #120]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f48:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	4916      	ldr	r1, [pc, #88]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f66:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	490f      	ldr	r1, [pc, #60]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	4907      	ldr	r1, [pc, #28]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002fa2:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	e002      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb6:	4913      	ldr	r1, [pc, #76]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	490b      	ldr	r1, [pc, #44]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff2:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3748      	adds	r7, #72	; 0x48
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e049      	b.n	80030ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd ffc2 	bl	8000fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f000 fb4e 	bl	80036e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d001      	beq.n	80030d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e047      	b.n	8003160 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a23      	ldr	r2, [pc, #140]	; (800316c <HAL_TIM_Base_Start+0xb4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01d      	beq.n	800311e <HAL_TIM_Base_Start+0x66>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d018      	beq.n	800311e <HAL_TIM_Base_Start+0x66>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <HAL_TIM_Base_Start+0xb8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_TIM_Base_Start+0x66>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1e      	ldr	r2, [pc, #120]	; (8003174 <HAL_TIM_Base_Start+0xbc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_TIM_Base_Start+0x66>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <HAL_TIM_Base_Start+0xc0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_TIM_Base_Start+0x66>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a1b      	ldr	r2, [pc, #108]	; (800317c <HAL_TIM_Base_Start+0xc4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_TIM_Base_Start+0x66>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_TIM_Base_Start+0xc8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d115      	bne.n	800314a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	4b17      	ldr	r3, [pc, #92]	; (8003184 <HAL_TIM_Base_Start+0xcc>)
 8003126:	4013      	ands	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b06      	cmp	r3, #6
 800312e:	d015      	beq.n	800315c <HAL_TIM_Base_Start+0xa4>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003136:	d011      	beq.n	800315c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003148:	e008      	b.n	800315c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e000      	b.n	800315e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40013400 	.word	0x40013400
 800317c:	40014000 	.word	0x40014000
 8003180:	40015000 	.word	0x40015000
 8003184:	00010007 	.word	0x00010007

08003188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d001      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e04f      	b.n	8003240 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a23      	ldr	r2, [pc, #140]	; (800324c <HAL_TIM_Base_Start_IT+0xc4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01d      	beq.n	80031fe <HAL_TIM_Base_Start_IT+0x76>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d018      	beq.n	80031fe <HAL_TIM_Base_Start_IT+0x76>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <HAL_TIM_Base_Start_IT+0xc8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_TIM_Base_Start_IT+0x76>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <HAL_TIM_Base_Start_IT+0xcc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00e      	beq.n	80031fe <HAL_TIM_Base_Start_IT+0x76>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1c      	ldr	r2, [pc, #112]	; (8003258 <HAL_TIM_Base_Start_IT+0xd0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d009      	beq.n	80031fe <HAL_TIM_Base_Start_IT+0x76>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1b      	ldr	r2, [pc, #108]	; (800325c <HAL_TIM_Base_Start_IT+0xd4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_TIM_Base_Start_IT+0x76>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a19      	ldr	r2, [pc, #100]	; (8003260 <HAL_TIM_Base_Start_IT+0xd8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d115      	bne.n	800322a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	4b17      	ldr	r3, [pc, #92]	; (8003264 <HAL_TIM_Base_Start_IT+0xdc>)
 8003206:	4013      	ands	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b06      	cmp	r3, #6
 800320e:	d015      	beq.n	800323c <HAL_TIM_Base_Start_IT+0xb4>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003216:	d011      	beq.n	800323c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003228:	e008      	b.n	800323c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e000      	b.n	800323e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40000400 	.word	0x40000400
 8003254:	40000800 	.word	0x40000800
 8003258:	40013400 	.word	0x40013400
 800325c:	40014000 	.word	0x40014000
 8003260:	40015000 	.word	0x40015000
 8003264:	00010007 	.word	0x00010007

08003268 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6a1a      	ldr	r2, [r3, #32]
 8003286:	f241 1311 	movw	r3, #4369	; 0x1111
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10f      	bne.n	80032b0 <HAL_TIM_Base_Stop_IT+0x48>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a1a      	ldr	r2, [r3, #32]
 8003296:	f240 4344 	movw	r3, #1092	; 0x444
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_TIM_Base_Stop_IT+0x48>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d122      	bne.n	8003322 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d11b      	bne.n	8003322 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 0202 	mvn.w	r2, #2
 80032f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f9ce 	bl	80036aa <HAL_TIM_IC_CaptureCallback>
 800330e:	e005      	b.n	800331c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f9c0 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9d1 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b04      	cmp	r3, #4
 800332e:	d122      	bne.n	8003376 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d11b      	bne.n	8003376 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f06f 0204 	mvn.w	r2, #4
 8003346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f9a4 	bl	80036aa <HAL_TIM_IC_CaptureCallback>
 8003362:	e005      	b.n	8003370 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f996 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f9a7 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b08      	cmp	r3, #8
 8003382:	d122      	bne.n	80033ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b08      	cmp	r3, #8
 8003390:	d11b      	bne.n	80033ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f06f 0208 	mvn.w	r2, #8
 800339a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2204      	movs	r2, #4
 80033a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f97a 	bl	80036aa <HAL_TIM_IC_CaptureCallback>
 80033b6:	e005      	b.n	80033c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f96c 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f97d 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b10      	cmp	r3, #16
 80033d6:	d122      	bne.n	800341e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d11b      	bne.n	800341e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0210 	mvn.w	r2, #16
 80033ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2208      	movs	r2, #8
 80033f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f950 	bl	80036aa <HAL_TIM_IC_CaptureCallback>
 800340a:	e005      	b.n	8003418 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f942 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f953 	bl	80036be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d10e      	bne.n	800344a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d107      	bne.n	800344a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0201 	mvn.w	r2, #1
 8003442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7fd fbcb 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d10e      	bne.n	8003476 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b80      	cmp	r3, #128	; 0x80
 8003464:	d107      	bne.n	8003476 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800346e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fb07 	bl	8003a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fafa 	bl	8003a98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f901 	bl	80036d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0220 	mvn.w	r2, #32
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 faba 	bl	8003a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_TIM_ConfigClockSource+0x1c>
 800351c:	2302      	movs	r3, #2
 800351e:	e0b6      	b.n	800368e <HAL_TIM_ConfigClockSource+0x18a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800354a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355c:	d03e      	beq.n	80035dc <HAL_TIM_ConfigClockSource+0xd8>
 800355e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003562:	f200 8087 	bhi.w	8003674 <HAL_TIM_ConfigClockSource+0x170>
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356a:	f000 8086 	beq.w	800367a <HAL_TIM_ConfigClockSource+0x176>
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	d87f      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x170>
 8003574:	2b70      	cmp	r3, #112	; 0x70
 8003576:	d01a      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0xaa>
 8003578:	2b70      	cmp	r3, #112	; 0x70
 800357a:	d87b      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x170>
 800357c:	2b60      	cmp	r3, #96	; 0x60
 800357e:	d050      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0x11e>
 8003580:	2b60      	cmp	r3, #96	; 0x60
 8003582:	d877      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x170>
 8003584:	2b50      	cmp	r3, #80	; 0x50
 8003586:	d03c      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xfe>
 8003588:	2b50      	cmp	r3, #80	; 0x50
 800358a:	d873      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x170>
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d058      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x13e>
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d86f      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x170>
 8003594:	2b30      	cmp	r3, #48	; 0x30
 8003596:	d064      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15e>
 8003598:	2b30      	cmp	r3, #48	; 0x30
 800359a:	d86b      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x170>
 800359c:	2b20      	cmp	r3, #32
 800359e:	d060      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15e>
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d867      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x170>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d05c      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15e>
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d05a      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x15e>
 80035ac:	e062      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035be:	f000 f9ab 	bl	8003918 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	609a      	str	r2, [r3, #8]
      break;
 80035da:	e04f      	b.n	800367c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	f000 f994 	bl	8003918 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035fe:	609a      	str	r2, [r3, #8]
      break;
 8003600:	e03c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800360e:	461a      	mov	r2, r3
 8003610:	f000 f908 	bl	8003824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2150      	movs	r1, #80	; 0x50
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f961 	bl	80038e2 <TIM_ITRx_SetConfig>
      break;
 8003620:	e02c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800362e:	461a      	mov	r2, r3
 8003630:	f000 f927 	bl	8003882 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2160      	movs	r1, #96	; 0x60
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f951 	bl	80038e2 <TIM_ITRx_SetConfig>
      break;
 8003640:	e01c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800364e:	461a      	mov	r2, r3
 8003650:	f000 f8e8 	bl	8003824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2140      	movs	r1, #64	; 0x40
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f941 	bl	80038e2 <TIM_ITRx_SetConfig>
      break;
 8003660:	e00c      	b.n	800367c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4619      	mov	r1, r3
 800366c:	4610      	mov	r0, r2
 800366e:	f000 f938 	bl	80038e2 <TIM_ITRx_SetConfig>
      break;
 8003672:	e003      	b.n	800367c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	e000      	b.n	800367c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800367a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a42      	ldr	r2, [pc, #264]	; (8003804 <TIM_Base_SetConfig+0x11c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003706:	d00f      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3f      	ldr	r2, [pc, #252]	; (8003808 <TIM_Base_SetConfig+0x120>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00b      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3e      	ldr	r2, [pc, #248]	; (800380c <TIM_Base_SetConfig+0x124>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3d      	ldr	r2, [pc, #244]	; (8003810 <TIM_Base_SetConfig+0x128>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3c      	ldr	r2, [pc, #240]	; (8003814 <TIM_Base_SetConfig+0x12c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d108      	bne.n	800373a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a31      	ldr	r2, [pc, #196]	; (8003804 <TIM_Base_SetConfig+0x11c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01f      	beq.n	8003782 <TIM_Base_SetConfig+0x9a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003748:	d01b      	beq.n	8003782 <TIM_Base_SetConfig+0x9a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2e      	ldr	r2, [pc, #184]	; (8003808 <TIM_Base_SetConfig+0x120>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d017      	beq.n	8003782 <TIM_Base_SetConfig+0x9a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2d      	ldr	r2, [pc, #180]	; (800380c <TIM_Base_SetConfig+0x124>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <TIM_Base_SetConfig+0x9a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <TIM_Base_SetConfig+0x128>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00f      	beq.n	8003782 <TIM_Base_SetConfig+0x9a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <TIM_Base_SetConfig+0x130>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00b      	beq.n	8003782 <TIM_Base_SetConfig+0x9a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2b      	ldr	r2, [pc, #172]	; (800381c <TIM_Base_SetConfig+0x134>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <TIM_Base_SetConfig+0x9a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <TIM_Base_SetConfig+0x138>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d003      	beq.n	8003782 <TIM_Base_SetConfig+0x9a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a25      	ldr	r2, [pc, #148]	; (8003814 <TIM_Base_SetConfig+0x12c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d108      	bne.n	8003794 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <TIM_Base_SetConfig+0x11c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <TIM_Base_SetConfig+0x100>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a13      	ldr	r2, [pc, #76]	; (8003810 <TIM_Base_SetConfig+0x128>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00f      	beq.n	80037e8 <TIM_Base_SetConfig+0x100>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a13      	ldr	r2, [pc, #76]	; (8003818 <TIM_Base_SetConfig+0x130>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <TIM_Base_SetConfig+0x100>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <TIM_Base_SetConfig+0x134>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d007      	beq.n	80037e8 <TIM_Base_SetConfig+0x100>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a11      	ldr	r2, [pc, #68]	; (8003820 <TIM_Base_SetConfig+0x138>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_Base_SetConfig+0x100>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a0c      	ldr	r2, [pc, #48]	; (8003814 <TIM_Base_SetConfig+0x12c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d103      	bne.n	80037f0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	615a      	str	r2, [r3, #20]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800
 8003810:	40013400 	.word	0x40013400
 8003814:	40015000 	.word	0x40015000
 8003818:	40014000 	.word	0x40014000
 800381c:	40014400 	.word	0x40014400
 8003820:	40014800 	.word	0x40014800

08003824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f023 0201 	bic.w	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800384e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f023 030a 	bic.w	r3, r3, #10
 8003860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003882:	b480      	push	{r7}
 8003884:	b087      	sub	sp, #28
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0210 	bic.w	r2, r3, #16
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	031b      	lsls	r3, r3, #12
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	621a      	str	r2, [r3, #32]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	f043 0307 	orr.w	r3, r3, #7
 8003904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	021a      	lsls	r2, r3, #8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	431a      	orrs	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4313      	orrs	r3, r2
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	609a      	str	r2, [r3, #8]
}
 800394c:	bf00      	nop
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800396c:	2302      	movs	r3, #2
 800396e:	e06d      	b.n	8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a30      	ldr	r2, [pc, #192]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d009      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2f      	ldr	r2, [pc, #188]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d004      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2d      	ldr	r2, [pc, #180]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d108      	bne.n	80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d01d      	beq.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ec:	d018      	beq.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1c      	ldr	r2, [pc, #112]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00e      	beq.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d10c      	bne.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40012c00 	.word	0x40012c00
 8003a5c:	40013400 	.word	0x40013400
 8003a60:	40015000 	.word	0x40015000
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40014000 	.word	0x40014000

08003a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <siprintf>:
 8003aac:	b40e      	push	{r1, r2, r3}
 8003aae:	b500      	push	{lr}
 8003ab0:	b09c      	sub	sp, #112	; 0x70
 8003ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ab4:	9002      	str	r0, [sp, #8]
 8003ab6:	9006      	str	r0, [sp, #24]
 8003ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003abc:	4809      	ldr	r0, [pc, #36]	; (8003ae4 <siprintf+0x38>)
 8003abe:	9107      	str	r1, [sp, #28]
 8003ac0:	9104      	str	r1, [sp, #16]
 8003ac2:	4909      	ldr	r1, [pc, #36]	; (8003ae8 <siprintf+0x3c>)
 8003ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ac8:	9105      	str	r1, [sp, #20]
 8003aca:	6800      	ldr	r0, [r0, #0]
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	a902      	add	r1, sp, #8
 8003ad0:	f000 f992 	bl	8003df8 <_svfiprintf_r>
 8003ad4:	9b02      	ldr	r3, [sp, #8]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	b01c      	add	sp, #112	; 0x70
 8003adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ae0:	b003      	add	sp, #12
 8003ae2:	4770      	bx	lr
 8003ae4:	20000078 	.word	0x20000078
 8003ae8:	ffff0208 	.word	0xffff0208

08003aec <memset>:
 8003aec:	4402      	add	r2, r0
 8003aee:	4603      	mov	r3, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	f803 1b01 	strb.w	r1, [r3], #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <__errno>:
 8003afc:	4b01      	ldr	r3, [pc, #4]	; (8003b04 <__errno+0x8>)
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000078 	.word	0x20000078

08003b08 <__libc_init_array>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	4d0d      	ldr	r5, [pc, #52]	; (8003b40 <__libc_init_array+0x38>)
 8003b0c:	4c0d      	ldr	r4, [pc, #52]	; (8003b44 <__libc_init_array+0x3c>)
 8003b0e:	1b64      	subs	r4, r4, r5
 8003b10:	10a4      	asrs	r4, r4, #2
 8003b12:	2600      	movs	r6, #0
 8003b14:	42a6      	cmp	r6, r4
 8003b16:	d109      	bne.n	8003b2c <__libc_init_array+0x24>
 8003b18:	4d0b      	ldr	r5, [pc, #44]	; (8003b48 <__libc_init_array+0x40>)
 8003b1a:	4c0c      	ldr	r4, [pc, #48]	; (8003b4c <__libc_init_array+0x44>)
 8003b1c:	f000 fc6a 	bl	80043f4 <_init>
 8003b20:	1b64      	subs	r4, r4, r5
 8003b22:	10a4      	asrs	r4, r4, #2
 8003b24:	2600      	movs	r6, #0
 8003b26:	42a6      	cmp	r6, r4
 8003b28:	d105      	bne.n	8003b36 <__libc_init_array+0x2e>
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b30:	4798      	blx	r3
 8003b32:	3601      	adds	r6, #1
 8003b34:	e7ee      	b.n	8003b14 <__libc_init_array+0xc>
 8003b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3a:	4798      	blx	r3
 8003b3c:	3601      	adds	r6, #1
 8003b3e:	e7f2      	b.n	8003b26 <__libc_init_array+0x1e>
 8003b40:	080044e4 	.word	0x080044e4
 8003b44:	080044e4 	.word	0x080044e4
 8003b48:	080044e4 	.word	0x080044e4
 8003b4c:	080044e8 	.word	0x080044e8

08003b50 <__retarget_lock_acquire_recursive>:
 8003b50:	4770      	bx	lr

08003b52 <__retarget_lock_release_recursive>:
 8003b52:	4770      	bx	lr

08003b54 <_free_r>:
 8003b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b56:	2900      	cmp	r1, #0
 8003b58:	d044      	beq.n	8003be4 <_free_r+0x90>
 8003b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b5e:	9001      	str	r0, [sp, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f1a1 0404 	sub.w	r4, r1, #4
 8003b66:	bfb8      	it	lt
 8003b68:	18e4      	addlt	r4, r4, r3
 8003b6a:	f000 f8df 	bl	8003d2c <__malloc_lock>
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <_free_r+0x94>)
 8003b70:	9801      	ldr	r0, [sp, #4]
 8003b72:	6813      	ldr	r3, [r2, #0]
 8003b74:	b933      	cbnz	r3, 8003b84 <_free_r+0x30>
 8003b76:	6063      	str	r3, [r4, #4]
 8003b78:	6014      	str	r4, [r2, #0]
 8003b7a:	b003      	add	sp, #12
 8003b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b80:	f000 b8da 	b.w	8003d38 <__malloc_unlock>
 8003b84:	42a3      	cmp	r3, r4
 8003b86:	d908      	bls.n	8003b9a <_free_r+0x46>
 8003b88:	6825      	ldr	r5, [r4, #0]
 8003b8a:	1961      	adds	r1, r4, r5
 8003b8c:	428b      	cmp	r3, r1
 8003b8e:	bf01      	itttt	eq
 8003b90:	6819      	ldreq	r1, [r3, #0]
 8003b92:	685b      	ldreq	r3, [r3, #4]
 8003b94:	1949      	addeq	r1, r1, r5
 8003b96:	6021      	streq	r1, [r4, #0]
 8003b98:	e7ed      	b.n	8003b76 <_free_r+0x22>
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	b10b      	cbz	r3, 8003ba4 <_free_r+0x50>
 8003ba0:	42a3      	cmp	r3, r4
 8003ba2:	d9fa      	bls.n	8003b9a <_free_r+0x46>
 8003ba4:	6811      	ldr	r1, [r2, #0]
 8003ba6:	1855      	adds	r5, r2, r1
 8003ba8:	42a5      	cmp	r5, r4
 8003baa:	d10b      	bne.n	8003bc4 <_free_r+0x70>
 8003bac:	6824      	ldr	r4, [r4, #0]
 8003bae:	4421      	add	r1, r4
 8003bb0:	1854      	adds	r4, r2, r1
 8003bb2:	42a3      	cmp	r3, r4
 8003bb4:	6011      	str	r1, [r2, #0]
 8003bb6:	d1e0      	bne.n	8003b7a <_free_r+0x26>
 8003bb8:	681c      	ldr	r4, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	6053      	str	r3, [r2, #4]
 8003bbe:	440c      	add	r4, r1
 8003bc0:	6014      	str	r4, [r2, #0]
 8003bc2:	e7da      	b.n	8003b7a <_free_r+0x26>
 8003bc4:	d902      	bls.n	8003bcc <_free_r+0x78>
 8003bc6:	230c      	movs	r3, #12
 8003bc8:	6003      	str	r3, [r0, #0]
 8003bca:	e7d6      	b.n	8003b7a <_free_r+0x26>
 8003bcc:	6825      	ldr	r5, [r4, #0]
 8003bce:	1961      	adds	r1, r4, r5
 8003bd0:	428b      	cmp	r3, r1
 8003bd2:	bf04      	itt	eq
 8003bd4:	6819      	ldreq	r1, [r3, #0]
 8003bd6:	685b      	ldreq	r3, [r3, #4]
 8003bd8:	6063      	str	r3, [r4, #4]
 8003bda:	bf04      	itt	eq
 8003bdc:	1949      	addeq	r1, r1, r5
 8003bde:	6021      	streq	r1, [r4, #0]
 8003be0:	6054      	str	r4, [r2, #4]
 8003be2:	e7ca      	b.n	8003b7a <_free_r+0x26>
 8003be4:	b003      	add	sp, #12
 8003be6:	bd30      	pop	{r4, r5, pc}
 8003be8:	200002e0 	.word	0x200002e0

08003bec <sbrk_aligned>:
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	4e0e      	ldr	r6, [pc, #56]	; (8003c28 <sbrk_aligned+0x3c>)
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	6831      	ldr	r1, [r6, #0]
 8003bf4:	4605      	mov	r5, r0
 8003bf6:	b911      	cbnz	r1, 8003bfe <sbrk_aligned+0x12>
 8003bf8:	f000 fba6 	bl	8004348 <_sbrk_r>
 8003bfc:	6030      	str	r0, [r6, #0]
 8003bfe:	4621      	mov	r1, r4
 8003c00:	4628      	mov	r0, r5
 8003c02:	f000 fba1 	bl	8004348 <_sbrk_r>
 8003c06:	1c43      	adds	r3, r0, #1
 8003c08:	d00a      	beq.n	8003c20 <sbrk_aligned+0x34>
 8003c0a:	1cc4      	adds	r4, r0, #3
 8003c0c:	f024 0403 	bic.w	r4, r4, #3
 8003c10:	42a0      	cmp	r0, r4
 8003c12:	d007      	beq.n	8003c24 <sbrk_aligned+0x38>
 8003c14:	1a21      	subs	r1, r4, r0
 8003c16:	4628      	mov	r0, r5
 8003c18:	f000 fb96 	bl	8004348 <_sbrk_r>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d101      	bne.n	8003c24 <sbrk_aligned+0x38>
 8003c20:	f04f 34ff 	mov.w	r4, #4294967295
 8003c24:	4620      	mov	r0, r4
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	200002e4 	.word	0x200002e4

08003c2c <_malloc_r>:
 8003c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c30:	1ccd      	adds	r5, r1, #3
 8003c32:	f025 0503 	bic.w	r5, r5, #3
 8003c36:	3508      	adds	r5, #8
 8003c38:	2d0c      	cmp	r5, #12
 8003c3a:	bf38      	it	cc
 8003c3c:	250c      	movcc	r5, #12
 8003c3e:	2d00      	cmp	r5, #0
 8003c40:	4607      	mov	r7, r0
 8003c42:	db01      	blt.n	8003c48 <_malloc_r+0x1c>
 8003c44:	42a9      	cmp	r1, r5
 8003c46:	d905      	bls.n	8003c54 <_malloc_r+0x28>
 8003c48:	230c      	movs	r3, #12
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	4630      	mov	r0, r6
 8003c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d28 <_malloc_r+0xfc>
 8003c58:	f000 f868 	bl	8003d2c <__malloc_lock>
 8003c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c60:	461c      	mov	r4, r3
 8003c62:	bb5c      	cbnz	r4, 8003cbc <_malloc_r+0x90>
 8003c64:	4629      	mov	r1, r5
 8003c66:	4638      	mov	r0, r7
 8003c68:	f7ff ffc0 	bl	8003bec <sbrk_aligned>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	4604      	mov	r4, r0
 8003c70:	d155      	bne.n	8003d1e <_malloc_r+0xf2>
 8003c72:	f8d8 4000 	ldr.w	r4, [r8]
 8003c76:	4626      	mov	r6, r4
 8003c78:	2e00      	cmp	r6, #0
 8003c7a:	d145      	bne.n	8003d08 <_malloc_r+0xdc>
 8003c7c:	2c00      	cmp	r4, #0
 8003c7e:	d048      	beq.n	8003d12 <_malloc_r+0xe6>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	4631      	mov	r1, r6
 8003c84:	4638      	mov	r0, r7
 8003c86:	eb04 0903 	add.w	r9, r4, r3
 8003c8a:	f000 fb5d 	bl	8004348 <_sbrk_r>
 8003c8e:	4581      	cmp	r9, r0
 8003c90:	d13f      	bne.n	8003d12 <_malloc_r+0xe6>
 8003c92:	6821      	ldr	r1, [r4, #0]
 8003c94:	1a6d      	subs	r5, r5, r1
 8003c96:	4629      	mov	r1, r5
 8003c98:	4638      	mov	r0, r7
 8003c9a:	f7ff ffa7 	bl	8003bec <sbrk_aligned>
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	d037      	beq.n	8003d12 <_malloc_r+0xe6>
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	442b      	add	r3, r5
 8003ca6:	6023      	str	r3, [r4, #0]
 8003ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d038      	beq.n	8003d22 <_malloc_r+0xf6>
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	42a2      	cmp	r2, r4
 8003cb4:	d12b      	bne.n	8003d0e <_malloc_r+0xe2>
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	e00f      	b.n	8003cdc <_malloc_r+0xb0>
 8003cbc:	6822      	ldr	r2, [r4, #0]
 8003cbe:	1b52      	subs	r2, r2, r5
 8003cc0:	d41f      	bmi.n	8003d02 <_malloc_r+0xd6>
 8003cc2:	2a0b      	cmp	r2, #11
 8003cc4:	d917      	bls.n	8003cf6 <_malloc_r+0xca>
 8003cc6:	1961      	adds	r1, r4, r5
 8003cc8:	42a3      	cmp	r3, r4
 8003cca:	6025      	str	r5, [r4, #0]
 8003ccc:	bf18      	it	ne
 8003cce:	6059      	strne	r1, [r3, #4]
 8003cd0:	6863      	ldr	r3, [r4, #4]
 8003cd2:	bf08      	it	eq
 8003cd4:	f8c8 1000 	streq.w	r1, [r8]
 8003cd8:	5162      	str	r2, [r4, r5]
 8003cda:	604b      	str	r3, [r1, #4]
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f104 060b 	add.w	r6, r4, #11
 8003ce2:	f000 f829 	bl	8003d38 <__malloc_unlock>
 8003ce6:	f026 0607 	bic.w	r6, r6, #7
 8003cea:	1d23      	adds	r3, r4, #4
 8003cec:	1af2      	subs	r2, r6, r3
 8003cee:	d0ae      	beq.n	8003c4e <_malloc_r+0x22>
 8003cf0:	1b9b      	subs	r3, r3, r6
 8003cf2:	50a3      	str	r3, [r4, r2]
 8003cf4:	e7ab      	b.n	8003c4e <_malloc_r+0x22>
 8003cf6:	42a3      	cmp	r3, r4
 8003cf8:	6862      	ldr	r2, [r4, #4]
 8003cfa:	d1dd      	bne.n	8003cb8 <_malloc_r+0x8c>
 8003cfc:	f8c8 2000 	str.w	r2, [r8]
 8003d00:	e7ec      	b.n	8003cdc <_malloc_r+0xb0>
 8003d02:	4623      	mov	r3, r4
 8003d04:	6864      	ldr	r4, [r4, #4]
 8003d06:	e7ac      	b.n	8003c62 <_malloc_r+0x36>
 8003d08:	4634      	mov	r4, r6
 8003d0a:	6876      	ldr	r6, [r6, #4]
 8003d0c:	e7b4      	b.n	8003c78 <_malloc_r+0x4c>
 8003d0e:	4613      	mov	r3, r2
 8003d10:	e7cc      	b.n	8003cac <_malloc_r+0x80>
 8003d12:	230c      	movs	r3, #12
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4638      	mov	r0, r7
 8003d18:	f000 f80e 	bl	8003d38 <__malloc_unlock>
 8003d1c:	e797      	b.n	8003c4e <_malloc_r+0x22>
 8003d1e:	6025      	str	r5, [r4, #0]
 8003d20:	e7dc      	b.n	8003cdc <_malloc_r+0xb0>
 8003d22:	605b      	str	r3, [r3, #4]
 8003d24:	deff      	udf	#255	; 0xff
 8003d26:	bf00      	nop
 8003d28:	200002e0 	.word	0x200002e0

08003d2c <__malloc_lock>:
 8003d2c:	4801      	ldr	r0, [pc, #4]	; (8003d34 <__malloc_lock+0x8>)
 8003d2e:	f7ff bf0f 	b.w	8003b50 <__retarget_lock_acquire_recursive>
 8003d32:	bf00      	nop
 8003d34:	200002dc 	.word	0x200002dc

08003d38 <__malloc_unlock>:
 8003d38:	4801      	ldr	r0, [pc, #4]	; (8003d40 <__malloc_unlock+0x8>)
 8003d3a:	f7ff bf0a 	b.w	8003b52 <__retarget_lock_release_recursive>
 8003d3e:	bf00      	nop
 8003d40:	200002dc 	.word	0x200002dc

08003d44 <__ssputs_r>:
 8003d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d48:	688e      	ldr	r6, [r1, #8]
 8003d4a:	461f      	mov	r7, r3
 8003d4c:	42be      	cmp	r6, r7
 8003d4e:	680b      	ldr	r3, [r1, #0]
 8003d50:	4682      	mov	sl, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	4690      	mov	r8, r2
 8003d56:	d82c      	bhi.n	8003db2 <__ssputs_r+0x6e>
 8003d58:	898a      	ldrh	r2, [r1, #12]
 8003d5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d5e:	d026      	beq.n	8003dae <__ssputs_r+0x6a>
 8003d60:	6965      	ldr	r5, [r4, #20]
 8003d62:	6909      	ldr	r1, [r1, #16]
 8003d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d68:	eba3 0901 	sub.w	r9, r3, r1
 8003d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d70:	1c7b      	adds	r3, r7, #1
 8003d72:	444b      	add	r3, r9
 8003d74:	106d      	asrs	r5, r5, #1
 8003d76:	429d      	cmp	r5, r3
 8003d78:	bf38      	it	cc
 8003d7a:	461d      	movcc	r5, r3
 8003d7c:	0553      	lsls	r3, r2, #21
 8003d7e:	d527      	bpl.n	8003dd0 <__ssputs_r+0x8c>
 8003d80:	4629      	mov	r1, r5
 8003d82:	f7ff ff53 	bl	8003c2c <_malloc_r>
 8003d86:	4606      	mov	r6, r0
 8003d88:	b360      	cbz	r0, 8003de4 <__ssputs_r+0xa0>
 8003d8a:	6921      	ldr	r1, [r4, #16]
 8003d8c:	464a      	mov	r2, r9
 8003d8e:	f000 faeb 	bl	8004368 <memcpy>
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9c:	81a3      	strh	r3, [r4, #12]
 8003d9e:	6126      	str	r6, [r4, #16]
 8003da0:	6165      	str	r5, [r4, #20]
 8003da2:	444e      	add	r6, r9
 8003da4:	eba5 0509 	sub.w	r5, r5, r9
 8003da8:	6026      	str	r6, [r4, #0]
 8003daa:	60a5      	str	r5, [r4, #8]
 8003dac:	463e      	mov	r6, r7
 8003dae:	42be      	cmp	r6, r7
 8003db0:	d900      	bls.n	8003db4 <__ssputs_r+0x70>
 8003db2:	463e      	mov	r6, r7
 8003db4:	6820      	ldr	r0, [r4, #0]
 8003db6:	4632      	mov	r2, r6
 8003db8:	4641      	mov	r1, r8
 8003dba:	f000 faab 	bl	8004314 <memmove>
 8003dbe:	68a3      	ldr	r3, [r4, #8]
 8003dc0:	1b9b      	subs	r3, r3, r6
 8003dc2:	60a3      	str	r3, [r4, #8]
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	4433      	add	r3, r6
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	2000      	movs	r0, #0
 8003dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd0:	462a      	mov	r2, r5
 8003dd2:	f000 fad7 	bl	8004384 <_realloc_r>
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d1e0      	bne.n	8003d9e <__ssputs_r+0x5a>
 8003ddc:	6921      	ldr	r1, [r4, #16]
 8003dde:	4650      	mov	r0, sl
 8003de0:	f7ff feb8 	bl	8003b54 <_free_r>
 8003de4:	230c      	movs	r3, #12
 8003de6:	f8ca 3000 	str.w	r3, [sl]
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df0:	81a3      	strh	r3, [r4, #12]
 8003df2:	f04f 30ff 	mov.w	r0, #4294967295
 8003df6:	e7e9      	b.n	8003dcc <__ssputs_r+0x88>

08003df8 <_svfiprintf_r>:
 8003df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfc:	4698      	mov	r8, r3
 8003dfe:	898b      	ldrh	r3, [r1, #12]
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	b09d      	sub	sp, #116	; 0x74
 8003e04:	4607      	mov	r7, r0
 8003e06:	460d      	mov	r5, r1
 8003e08:	4614      	mov	r4, r2
 8003e0a:	d50e      	bpl.n	8003e2a <_svfiprintf_r+0x32>
 8003e0c:	690b      	ldr	r3, [r1, #16]
 8003e0e:	b963      	cbnz	r3, 8003e2a <_svfiprintf_r+0x32>
 8003e10:	2140      	movs	r1, #64	; 0x40
 8003e12:	f7ff ff0b 	bl	8003c2c <_malloc_r>
 8003e16:	6028      	str	r0, [r5, #0]
 8003e18:	6128      	str	r0, [r5, #16]
 8003e1a:	b920      	cbnz	r0, 8003e26 <_svfiprintf_r+0x2e>
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	e0d0      	b.n	8003fc8 <_svfiprintf_r+0x1d0>
 8003e26:	2340      	movs	r3, #64	; 0x40
 8003e28:	616b      	str	r3, [r5, #20]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2e:	2320      	movs	r3, #32
 8003e30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e38:	2330      	movs	r3, #48	; 0x30
 8003e3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fe0 <_svfiprintf_r+0x1e8>
 8003e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e42:	f04f 0901 	mov.w	r9, #1
 8003e46:	4623      	mov	r3, r4
 8003e48:	469a      	mov	sl, r3
 8003e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e4e:	b10a      	cbz	r2, 8003e54 <_svfiprintf_r+0x5c>
 8003e50:	2a25      	cmp	r2, #37	; 0x25
 8003e52:	d1f9      	bne.n	8003e48 <_svfiprintf_r+0x50>
 8003e54:	ebba 0b04 	subs.w	fp, sl, r4
 8003e58:	d00b      	beq.n	8003e72 <_svfiprintf_r+0x7a>
 8003e5a:	465b      	mov	r3, fp
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	4629      	mov	r1, r5
 8003e60:	4638      	mov	r0, r7
 8003e62:	f7ff ff6f 	bl	8003d44 <__ssputs_r>
 8003e66:	3001      	adds	r0, #1
 8003e68:	f000 80a9 	beq.w	8003fbe <_svfiprintf_r+0x1c6>
 8003e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e6e:	445a      	add	r2, fp
 8003e70:	9209      	str	r2, [sp, #36]	; 0x24
 8003e72:	f89a 3000 	ldrb.w	r3, [sl]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80a1 	beq.w	8003fbe <_svfiprintf_r+0x1c6>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e86:	f10a 0a01 	add.w	sl, sl, #1
 8003e8a:	9304      	str	r3, [sp, #16]
 8003e8c:	9307      	str	r3, [sp, #28]
 8003e8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e92:	931a      	str	r3, [sp, #104]	; 0x68
 8003e94:	4654      	mov	r4, sl
 8003e96:	2205      	movs	r2, #5
 8003e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e9c:	4850      	ldr	r0, [pc, #320]	; (8003fe0 <_svfiprintf_r+0x1e8>)
 8003e9e:	f7fc f99f 	bl	80001e0 <memchr>
 8003ea2:	9a04      	ldr	r2, [sp, #16]
 8003ea4:	b9d8      	cbnz	r0, 8003ede <_svfiprintf_r+0xe6>
 8003ea6:	06d0      	lsls	r0, r2, #27
 8003ea8:	bf44      	itt	mi
 8003eaa:	2320      	movmi	r3, #32
 8003eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb0:	0711      	lsls	r1, r2, #28
 8003eb2:	bf44      	itt	mi
 8003eb4:	232b      	movmi	r3, #43	; 0x2b
 8003eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eba:	f89a 3000 	ldrb.w	r3, [sl]
 8003ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec0:	d015      	beq.n	8003eee <_svfiprintf_r+0xf6>
 8003ec2:	9a07      	ldr	r2, [sp, #28]
 8003ec4:	4654      	mov	r4, sl
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f04f 0c0a 	mov.w	ip, #10
 8003ecc:	4621      	mov	r1, r4
 8003ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ed2:	3b30      	subs	r3, #48	; 0x30
 8003ed4:	2b09      	cmp	r3, #9
 8003ed6:	d94d      	bls.n	8003f74 <_svfiprintf_r+0x17c>
 8003ed8:	b1b0      	cbz	r0, 8003f08 <_svfiprintf_r+0x110>
 8003eda:	9207      	str	r2, [sp, #28]
 8003edc:	e014      	b.n	8003f08 <_svfiprintf_r+0x110>
 8003ede:	eba0 0308 	sub.w	r3, r0, r8
 8003ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	9304      	str	r3, [sp, #16]
 8003eea:	46a2      	mov	sl, r4
 8003eec:	e7d2      	b.n	8003e94 <_svfiprintf_r+0x9c>
 8003eee:	9b03      	ldr	r3, [sp, #12]
 8003ef0:	1d19      	adds	r1, r3, #4
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	9103      	str	r1, [sp, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bfbb      	ittet	lt
 8003efa:	425b      	neglt	r3, r3
 8003efc:	f042 0202 	orrlt.w	r2, r2, #2
 8003f00:	9307      	strge	r3, [sp, #28]
 8003f02:	9307      	strlt	r3, [sp, #28]
 8003f04:	bfb8      	it	lt
 8003f06:	9204      	strlt	r2, [sp, #16]
 8003f08:	7823      	ldrb	r3, [r4, #0]
 8003f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003f0c:	d10c      	bne.n	8003f28 <_svfiprintf_r+0x130>
 8003f0e:	7863      	ldrb	r3, [r4, #1]
 8003f10:	2b2a      	cmp	r3, #42	; 0x2a
 8003f12:	d134      	bne.n	8003f7e <_svfiprintf_r+0x186>
 8003f14:	9b03      	ldr	r3, [sp, #12]
 8003f16:	1d1a      	adds	r2, r3, #4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	9203      	str	r2, [sp, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bfb8      	it	lt
 8003f20:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f24:	3402      	adds	r4, #2
 8003f26:	9305      	str	r3, [sp, #20]
 8003f28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003ff0 <_svfiprintf_r+0x1f8>
 8003f2c:	7821      	ldrb	r1, [r4, #0]
 8003f2e:	2203      	movs	r2, #3
 8003f30:	4650      	mov	r0, sl
 8003f32:	f7fc f955 	bl	80001e0 <memchr>
 8003f36:	b138      	cbz	r0, 8003f48 <_svfiprintf_r+0x150>
 8003f38:	9b04      	ldr	r3, [sp, #16]
 8003f3a:	eba0 000a 	sub.w	r0, r0, sl
 8003f3e:	2240      	movs	r2, #64	; 0x40
 8003f40:	4082      	lsls	r2, r0
 8003f42:	4313      	orrs	r3, r2
 8003f44:	3401      	adds	r4, #1
 8003f46:	9304      	str	r3, [sp, #16]
 8003f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f4c:	4825      	ldr	r0, [pc, #148]	; (8003fe4 <_svfiprintf_r+0x1ec>)
 8003f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f52:	2206      	movs	r2, #6
 8003f54:	f7fc f944 	bl	80001e0 <memchr>
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d038      	beq.n	8003fce <_svfiprintf_r+0x1d6>
 8003f5c:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <_svfiprintf_r+0x1f0>)
 8003f5e:	bb1b      	cbnz	r3, 8003fa8 <_svfiprintf_r+0x1b0>
 8003f60:	9b03      	ldr	r3, [sp, #12]
 8003f62:	3307      	adds	r3, #7
 8003f64:	f023 0307 	bic.w	r3, r3, #7
 8003f68:	3308      	adds	r3, #8
 8003f6a:	9303      	str	r3, [sp, #12]
 8003f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6e:	4433      	add	r3, r6
 8003f70:	9309      	str	r3, [sp, #36]	; 0x24
 8003f72:	e768      	b.n	8003e46 <_svfiprintf_r+0x4e>
 8003f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f78:	460c      	mov	r4, r1
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	e7a6      	b.n	8003ecc <_svfiprintf_r+0xd4>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	3401      	adds	r4, #1
 8003f82:	9305      	str	r3, [sp, #20]
 8003f84:	4619      	mov	r1, r3
 8003f86:	f04f 0c0a 	mov.w	ip, #10
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f90:	3a30      	subs	r2, #48	; 0x30
 8003f92:	2a09      	cmp	r2, #9
 8003f94:	d903      	bls.n	8003f9e <_svfiprintf_r+0x1a6>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0c6      	beq.n	8003f28 <_svfiprintf_r+0x130>
 8003f9a:	9105      	str	r1, [sp, #20]
 8003f9c:	e7c4      	b.n	8003f28 <_svfiprintf_r+0x130>
 8003f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e7f0      	b.n	8003f8a <_svfiprintf_r+0x192>
 8003fa8:	ab03      	add	r3, sp, #12
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	462a      	mov	r2, r5
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <_svfiprintf_r+0x1f4>)
 8003fb0:	a904      	add	r1, sp, #16
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	f3af 8000 	nop.w
 8003fb8:	1c42      	adds	r2, r0, #1
 8003fba:	4606      	mov	r6, r0
 8003fbc:	d1d6      	bne.n	8003f6c <_svfiprintf_r+0x174>
 8003fbe:	89ab      	ldrh	r3, [r5, #12]
 8003fc0:	065b      	lsls	r3, r3, #25
 8003fc2:	f53f af2d 	bmi.w	8003e20 <_svfiprintf_r+0x28>
 8003fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc8:	b01d      	add	sp, #116	; 0x74
 8003fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fce:	ab03      	add	r3, sp, #12
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	462a      	mov	r2, r5
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <_svfiprintf_r+0x1f4>)
 8003fd6:	a904      	add	r1, sp, #16
 8003fd8:	4638      	mov	r0, r7
 8003fda:	f000 f879 	bl	80040d0 <_printf_i>
 8003fde:	e7eb      	b.n	8003fb8 <_svfiprintf_r+0x1c0>
 8003fe0:	080044b0 	.word	0x080044b0
 8003fe4:	080044ba 	.word	0x080044ba
 8003fe8:	00000000 	.word	0x00000000
 8003fec:	08003d45 	.word	0x08003d45
 8003ff0:	080044b6 	.word	0x080044b6

08003ff4 <_printf_common>:
 8003ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff8:	4616      	mov	r6, r2
 8003ffa:	4699      	mov	r9, r3
 8003ffc:	688a      	ldr	r2, [r1, #8]
 8003ffe:	690b      	ldr	r3, [r1, #16]
 8004000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004004:	4293      	cmp	r3, r2
 8004006:	bfb8      	it	lt
 8004008:	4613      	movlt	r3, r2
 800400a:	6033      	str	r3, [r6, #0]
 800400c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004010:	4607      	mov	r7, r0
 8004012:	460c      	mov	r4, r1
 8004014:	b10a      	cbz	r2, 800401a <_printf_common+0x26>
 8004016:	3301      	adds	r3, #1
 8004018:	6033      	str	r3, [r6, #0]
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	0699      	lsls	r1, r3, #26
 800401e:	bf42      	ittt	mi
 8004020:	6833      	ldrmi	r3, [r6, #0]
 8004022:	3302      	addmi	r3, #2
 8004024:	6033      	strmi	r3, [r6, #0]
 8004026:	6825      	ldr	r5, [r4, #0]
 8004028:	f015 0506 	ands.w	r5, r5, #6
 800402c:	d106      	bne.n	800403c <_printf_common+0x48>
 800402e:	f104 0a19 	add.w	sl, r4, #25
 8004032:	68e3      	ldr	r3, [r4, #12]
 8004034:	6832      	ldr	r2, [r6, #0]
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	42ab      	cmp	r3, r5
 800403a:	dc26      	bgt.n	800408a <_printf_common+0x96>
 800403c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004040:	1e13      	subs	r3, r2, #0
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	bf18      	it	ne
 8004046:	2301      	movne	r3, #1
 8004048:	0692      	lsls	r2, r2, #26
 800404a:	d42b      	bmi.n	80040a4 <_printf_common+0xb0>
 800404c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004050:	4649      	mov	r1, r9
 8004052:	4638      	mov	r0, r7
 8004054:	47c0      	blx	r8
 8004056:	3001      	adds	r0, #1
 8004058:	d01e      	beq.n	8004098 <_printf_common+0xa4>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	6922      	ldr	r2, [r4, #16]
 800405e:	f003 0306 	and.w	r3, r3, #6
 8004062:	2b04      	cmp	r3, #4
 8004064:	bf02      	ittt	eq
 8004066:	68e5      	ldreq	r5, [r4, #12]
 8004068:	6833      	ldreq	r3, [r6, #0]
 800406a:	1aed      	subeq	r5, r5, r3
 800406c:	68a3      	ldr	r3, [r4, #8]
 800406e:	bf0c      	ite	eq
 8004070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004074:	2500      	movne	r5, #0
 8004076:	4293      	cmp	r3, r2
 8004078:	bfc4      	itt	gt
 800407a:	1a9b      	subgt	r3, r3, r2
 800407c:	18ed      	addgt	r5, r5, r3
 800407e:	2600      	movs	r6, #0
 8004080:	341a      	adds	r4, #26
 8004082:	42b5      	cmp	r5, r6
 8004084:	d11a      	bne.n	80040bc <_printf_common+0xc8>
 8004086:	2000      	movs	r0, #0
 8004088:	e008      	b.n	800409c <_printf_common+0xa8>
 800408a:	2301      	movs	r3, #1
 800408c:	4652      	mov	r2, sl
 800408e:	4649      	mov	r1, r9
 8004090:	4638      	mov	r0, r7
 8004092:	47c0      	blx	r8
 8004094:	3001      	adds	r0, #1
 8004096:	d103      	bne.n	80040a0 <_printf_common+0xac>
 8004098:	f04f 30ff 	mov.w	r0, #4294967295
 800409c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a0:	3501      	adds	r5, #1
 80040a2:	e7c6      	b.n	8004032 <_printf_common+0x3e>
 80040a4:	18e1      	adds	r1, r4, r3
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	2030      	movs	r0, #48	; 0x30
 80040aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ae:	4422      	add	r2, r4
 80040b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040b8:	3302      	adds	r3, #2
 80040ba:	e7c7      	b.n	800404c <_printf_common+0x58>
 80040bc:	2301      	movs	r3, #1
 80040be:	4622      	mov	r2, r4
 80040c0:	4649      	mov	r1, r9
 80040c2:	4638      	mov	r0, r7
 80040c4:	47c0      	blx	r8
 80040c6:	3001      	adds	r0, #1
 80040c8:	d0e6      	beq.n	8004098 <_printf_common+0xa4>
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7d9      	b.n	8004082 <_printf_common+0x8e>
	...

080040d0 <_printf_i>:
 80040d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d4:	7e0f      	ldrb	r7, [r1, #24]
 80040d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040d8:	2f78      	cmp	r7, #120	; 0x78
 80040da:	4691      	mov	r9, r2
 80040dc:	4680      	mov	r8, r0
 80040de:	460c      	mov	r4, r1
 80040e0:	469a      	mov	sl, r3
 80040e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040e6:	d807      	bhi.n	80040f8 <_printf_i+0x28>
 80040e8:	2f62      	cmp	r7, #98	; 0x62
 80040ea:	d80a      	bhi.n	8004102 <_printf_i+0x32>
 80040ec:	2f00      	cmp	r7, #0
 80040ee:	f000 80d4 	beq.w	800429a <_printf_i+0x1ca>
 80040f2:	2f58      	cmp	r7, #88	; 0x58
 80040f4:	f000 80c0 	beq.w	8004278 <_printf_i+0x1a8>
 80040f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004100:	e03a      	b.n	8004178 <_printf_i+0xa8>
 8004102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004106:	2b15      	cmp	r3, #21
 8004108:	d8f6      	bhi.n	80040f8 <_printf_i+0x28>
 800410a:	a101      	add	r1, pc, #4	; (adr r1, 8004110 <_printf_i+0x40>)
 800410c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004110:	08004169 	.word	0x08004169
 8004114:	0800417d 	.word	0x0800417d
 8004118:	080040f9 	.word	0x080040f9
 800411c:	080040f9 	.word	0x080040f9
 8004120:	080040f9 	.word	0x080040f9
 8004124:	080040f9 	.word	0x080040f9
 8004128:	0800417d 	.word	0x0800417d
 800412c:	080040f9 	.word	0x080040f9
 8004130:	080040f9 	.word	0x080040f9
 8004134:	080040f9 	.word	0x080040f9
 8004138:	080040f9 	.word	0x080040f9
 800413c:	08004281 	.word	0x08004281
 8004140:	080041a9 	.word	0x080041a9
 8004144:	0800423b 	.word	0x0800423b
 8004148:	080040f9 	.word	0x080040f9
 800414c:	080040f9 	.word	0x080040f9
 8004150:	080042a3 	.word	0x080042a3
 8004154:	080040f9 	.word	0x080040f9
 8004158:	080041a9 	.word	0x080041a9
 800415c:	080040f9 	.word	0x080040f9
 8004160:	080040f9 	.word	0x080040f9
 8004164:	08004243 	.word	0x08004243
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	1d1a      	adds	r2, r3, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	602a      	str	r2, [r5, #0]
 8004170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004178:	2301      	movs	r3, #1
 800417a:	e09f      	b.n	80042bc <_printf_i+0x1ec>
 800417c:	6820      	ldr	r0, [r4, #0]
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	0607      	lsls	r7, r0, #24
 8004182:	f103 0104 	add.w	r1, r3, #4
 8004186:	6029      	str	r1, [r5, #0]
 8004188:	d501      	bpl.n	800418e <_printf_i+0xbe>
 800418a:	681e      	ldr	r6, [r3, #0]
 800418c:	e003      	b.n	8004196 <_printf_i+0xc6>
 800418e:	0646      	lsls	r6, r0, #25
 8004190:	d5fb      	bpl.n	800418a <_printf_i+0xba>
 8004192:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004196:	2e00      	cmp	r6, #0
 8004198:	da03      	bge.n	80041a2 <_printf_i+0xd2>
 800419a:	232d      	movs	r3, #45	; 0x2d
 800419c:	4276      	negs	r6, r6
 800419e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a2:	485a      	ldr	r0, [pc, #360]	; (800430c <_printf_i+0x23c>)
 80041a4:	230a      	movs	r3, #10
 80041a6:	e012      	b.n	80041ce <_printf_i+0xfe>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	6820      	ldr	r0, [r4, #0]
 80041ac:	1d19      	adds	r1, r3, #4
 80041ae:	6029      	str	r1, [r5, #0]
 80041b0:	0605      	lsls	r5, r0, #24
 80041b2:	d501      	bpl.n	80041b8 <_printf_i+0xe8>
 80041b4:	681e      	ldr	r6, [r3, #0]
 80041b6:	e002      	b.n	80041be <_printf_i+0xee>
 80041b8:	0641      	lsls	r1, r0, #25
 80041ba:	d5fb      	bpl.n	80041b4 <_printf_i+0xe4>
 80041bc:	881e      	ldrh	r6, [r3, #0]
 80041be:	4853      	ldr	r0, [pc, #332]	; (800430c <_printf_i+0x23c>)
 80041c0:	2f6f      	cmp	r7, #111	; 0x6f
 80041c2:	bf0c      	ite	eq
 80041c4:	2308      	moveq	r3, #8
 80041c6:	230a      	movne	r3, #10
 80041c8:	2100      	movs	r1, #0
 80041ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ce:	6865      	ldr	r5, [r4, #4]
 80041d0:	60a5      	str	r5, [r4, #8]
 80041d2:	2d00      	cmp	r5, #0
 80041d4:	bfa2      	ittt	ge
 80041d6:	6821      	ldrge	r1, [r4, #0]
 80041d8:	f021 0104 	bicge.w	r1, r1, #4
 80041dc:	6021      	strge	r1, [r4, #0]
 80041de:	b90e      	cbnz	r6, 80041e4 <_printf_i+0x114>
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	d04b      	beq.n	800427c <_printf_i+0x1ac>
 80041e4:	4615      	mov	r5, r2
 80041e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80041ea:	fb03 6711 	mls	r7, r3, r1, r6
 80041ee:	5dc7      	ldrb	r7, [r0, r7]
 80041f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041f4:	4637      	mov	r7, r6
 80041f6:	42bb      	cmp	r3, r7
 80041f8:	460e      	mov	r6, r1
 80041fa:	d9f4      	bls.n	80041e6 <_printf_i+0x116>
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d10b      	bne.n	8004218 <_printf_i+0x148>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	07de      	lsls	r6, r3, #31
 8004204:	d508      	bpl.n	8004218 <_printf_i+0x148>
 8004206:	6923      	ldr	r3, [r4, #16]
 8004208:	6861      	ldr	r1, [r4, #4]
 800420a:	4299      	cmp	r1, r3
 800420c:	bfde      	ittt	le
 800420e:	2330      	movle	r3, #48	; 0x30
 8004210:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004214:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004218:	1b52      	subs	r2, r2, r5
 800421a:	6122      	str	r2, [r4, #16]
 800421c:	f8cd a000 	str.w	sl, [sp]
 8004220:	464b      	mov	r3, r9
 8004222:	aa03      	add	r2, sp, #12
 8004224:	4621      	mov	r1, r4
 8004226:	4640      	mov	r0, r8
 8004228:	f7ff fee4 	bl	8003ff4 <_printf_common>
 800422c:	3001      	adds	r0, #1
 800422e:	d14a      	bne.n	80042c6 <_printf_i+0x1f6>
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	b004      	add	sp, #16
 8004236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	f043 0320 	orr.w	r3, r3, #32
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	4833      	ldr	r0, [pc, #204]	; (8004310 <_printf_i+0x240>)
 8004244:	2778      	movs	r7, #120	; 0x78
 8004246:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	6829      	ldr	r1, [r5, #0]
 800424e:	061f      	lsls	r7, r3, #24
 8004250:	f851 6b04 	ldr.w	r6, [r1], #4
 8004254:	d402      	bmi.n	800425c <_printf_i+0x18c>
 8004256:	065f      	lsls	r7, r3, #25
 8004258:	bf48      	it	mi
 800425a:	b2b6      	uxthmi	r6, r6
 800425c:	07df      	lsls	r7, r3, #31
 800425e:	bf48      	it	mi
 8004260:	f043 0320 	orrmi.w	r3, r3, #32
 8004264:	6029      	str	r1, [r5, #0]
 8004266:	bf48      	it	mi
 8004268:	6023      	strmi	r3, [r4, #0]
 800426a:	b91e      	cbnz	r6, 8004274 <_printf_i+0x1a4>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	f023 0320 	bic.w	r3, r3, #32
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	2310      	movs	r3, #16
 8004276:	e7a7      	b.n	80041c8 <_printf_i+0xf8>
 8004278:	4824      	ldr	r0, [pc, #144]	; (800430c <_printf_i+0x23c>)
 800427a:	e7e4      	b.n	8004246 <_printf_i+0x176>
 800427c:	4615      	mov	r5, r2
 800427e:	e7bd      	b.n	80041fc <_printf_i+0x12c>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	6826      	ldr	r6, [r4, #0]
 8004284:	6961      	ldr	r1, [r4, #20]
 8004286:	1d18      	adds	r0, r3, #4
 8004288:	6028      	str	r0, [r5, #0]
 800428a:	0635      	lsls	r5, r6, #24
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	d501      	bpl.n	8004294 <_printf_i+0x1c4>
 8004290:	6019      	str	r1, [r3, #0]
 8004292:	e002      	b.n	800429a <_printf_i+0x1ca>
 8004294:	0670      	lsls	r0, r6, #25
 8004296:	d5fb      	bpl.n	8004290 <_printf_i+0x1c0>
 8004298:	8019      	strh	r1, [r3, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	6123      	str	r3, [r4, #16]
 800429e:	4615      	mov	r5, r2
 80042a0:	e7bc      	b.n	800421c <_printf_i+0x14c>
 80042a2:	682b      	ldr	r3, [r5, #0]
 80042a4:	1d1a      	adds	r2, r3, #4
 80042a6:	602a      	str	r2, [r5, #0]
 80042a8:	681d      	ldr	r5, [r3, #0]
 80042aa:	6862      	ldr	r2, [r4, #4]
 80042ac:	2100      	movs	r1, #0
 80042ae:	4628      	mov	r0, r5
 80042b0:	f7fb ff96 	bl	80001e0 <memchr>
 80042b4:	b108      	cbz	r0, 80042ba <_printf_i+0x1ea>
 80042b6:	1b40      	subs	r0, r0, r5
 80042b8:	6060      	str	r0, [r4, #4]
 80042ba:	6863      	ldr	r3, [r4, #4]
 80042bc:	6123      	str	r3, [r4, #16]
 80042be:	2300      	movs	r3, #0
 80042c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c4:	e7aa      	b.n	800421c <_printf_i+0x14c>
 80042c6:	6923      	ldr	r3, [r4, #16]
 80042c8:	462a      	mov	r2, r5
 80042ca:	4649      	mov	r1, r9
 80042cc:	4640      	mov	r0, r8
 80042ce:	47d0      	blx	sl
 80042d0:	3001      	adds	r0, #1
 80042d2:	d0ad      	beq.n	8004230 <_printf_i+0x160>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	079b      	lsls	r3, r3, #30
 80042d8:	d413      	bmi.n	8004302 <_printf_i+0x232>
 80042da:	68e0      	ldr	r0, [r4, #12]
 80042dc:	9b03      	ldr	r3, [sp, #12]
 80042de:	4298      	cmp	r0, r3
 80042e0:	bfb8      	it	lt
 80042e2:	4618      	movlt	r0, r3
 80042e4:	e7a6      	b.n	8004234 <_printf_i+0x164>
 80042e6:	2301      	movs	r3, #1
 80042e8:	4632      	mov	r2, r6
 80042ea:	4649      	mov	r1, r9
 80042ec:	4640      	mov	r0, r8
 80042ee:	47d0      	blx	sl
 80042f0:	3001      	adds	r0, #1
 80042f2:	d09d      	beq.n	8004230 <_printf_i+0x160>
 80042f4:	3501      	adds	r5, #1
 80042f6:	68e3      	ldr	r3, [r4, #12]
 80042f8:	9903      	ldr	r1, [sp, #12]
 80042fa:	1a5b      	subs	r3, r3, r1
 80042fc:	42ab      	cmp	r3, r5
 80042fe:	dcf2      	bgt.n	80042e6 <_printf_i+0x216>
 8004300:	e7eb      	b.n	80042da <_printf_i+0x20a>
 8004302:	2500      	movs	r5, #0
 8004304:	f104 0619 	add.w	r6, r4, #25
 8004308:	e7f5      	b.n	80042f6 <_printf_i+0x226>
 800430a:	bf00      	nop
 800430c:	080044c1 	.word	0x080044c1
 8004310:	080044d2 	.word	0x080044d2

08004314 <memmove>:
 8004314:	4288      	cmp	r0, r1
 8004316:	b510      	push	{r4, lr}
 8004318:	eb01 0402 	add.w	r4, r1, r2
 800431c:	d902      	bls.n	8004324 <memmove+0x10>
 800431e:	4284      	cmp	r4, r0
 8004320:	4623      	mov	r3, r4
 8004322:	d807      	bhi.n	8004334 <memmove+0x20>
 8004324:	1e43      	subs	r3, r0, #1
 8004326:	42a1      	cmp	r1, r4
 8004328:	d008      	beq.n	800433c <memmove+0x28>
 800432a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800432e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004332:	e7f8      	b.n	8004326 <memmove+0x12>
 8004334:	4402      	add	r2, r0
 8004336:	4601      	mov	r1, r0
 8004338:	428a      	cmp	r2, r1
 800433a:	d100      	bne.n	800433e <memmove+0x2a>
 800433c:	bd10      	pop	{r4, pc}
 800433e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004346:	e7f7      	b.n	8004338 <memmove+0x24>

08004348 <_sbrk_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4d06      	ldr	r5, [pc, #24]	; (8004364 <_sbrk_r+0x1c>)
 800434c:	2300      	movs	r3, #0
 800434e:	4604      	mov	r4, r0
 8004350:	4608      	mov	r0, r1
 8004352:	602b      	str	r3, [r5, #0]
 8004354:	f7fc fd4c 	bl	8000df0 <_sbrk>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d102      	bne.n	8004362 <_sbrk_r+0x1a>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	b103      	cbz	r3, 8004362 <_sbrk_r+0x1a>
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	200002d8 	.word	0x200002d8

08004368 <memcpy>:
 8004368:	440a      	add	r2, r1
 800436a:	4291      	cmp	r1, r2
 800436c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004370:	d100      	bne.n	8004374 <memcpy+0xc>
 8004372:	4770      	bx	lr
 8004374:	b510      	push	{r4, lr}
 8004376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800437a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800437e:	4291      	cmp	r1, r2
 8004380:	d1f9      	bne.n	8004376 <memcpy+0xe>
 8004382:	bd10      	pop	{r4, pc}

08004384 <_realloc_r>:
 8004384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004388:	4680      	mov	r8, r0
 800438a:	4614      	mov	r4, r2
 800438c:	460e      	mov	r6, r1
 800438e:	b921      	cbnz	r1, 800439a <_realloc_r+0x16>
 8004390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004394:	4611      	mov	r1, r2
 8004396:	f7ff bc49 	b.w	8003c2c <_malloc_r>
 800439a:	b92a      	cbnz	r2, 80043a8 <_realloc_r+0x24>
 800439c:	f7ff fbda 	bl	8003b54 <_free_r>
 80043a0:	4625      	mov	r5, r4
 80043a2:	4628      	mov	r0, r5
 80043a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a8:	f000 f81b 	bl	80043e2 <_malloc_usable_size_r>
 80043ac:	4284      	cmp	r4, r0
 80043ae:	4607      	mov	r7, r0
 80043b0:	d802      	bhi.n	80043b8 <_realloc_r+0x34>
 80043b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043b6:	d812      	bhi.n	80043de <_realloc_r+0x5a>
 80043b8:	4621      	mov	r1, r4
 80043ba:	4640      	mov	r0, r8
 80043bc:	f7ff fc36 	bl	8003c2c <_malloc_r>
 80043c0:	4605      	mov	r5, r0
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d0ed      	beq.n	80043a2 <_realloc_r+0x1e>
 80043c6:	42bc      	cmp	r4, r7
 80043c8:	4622      	mov	r2, r4
 80043ca:	4631      	mov	r1, r6
 80043cc:	bf28      	it	cs
 80043ce:	463a      	movcs	r2, r7
 80043d0:	f7ff ffca 	bl	8004368 <memcpy>
 80043d4:	4631      	mov	r1, r6
 80043d6:	4640      	mov	r0, r8
 80043d8:	f7ff fbbc 	bl	8003b54 <_free_r>
 80043dc:	e7e1      	b.n	80043a2 <_realloc_r+0x1e>
 80043de:	4635      	mov	r5, r6
 80043e0:	e7df      	b.n	80043a2 <_realloc_r+0x1e>

080043e2 <_malloc_usable_size_r>:
 80043e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e6:	1f18      	subs	r0, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bfbc      	itt	lt
 80043ec:	580b      	ldrlt	r3, [r1, r0]
 80043ee:	18c0      	addlt	r0, r0, r3
 80043f0:	4770      	bx	lr
	...

080043f4 <_init>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr

08004400 <_fini>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	bf00      	nop
 8004404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004406:	bc08      	pop	{r3}
 8004408:	469e      	mov	lr, r3
 800440a:	4770      	bx	lr
